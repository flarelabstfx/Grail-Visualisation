//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	January 1996


/***************************************************************************

  File:  classes/re/retofl.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      void re<S>::retofl(fl<S>& a) const
      inline void empty_set<S>::subexp_to_fl(fl<S>& a) const
      void empty_string<S>::subexp_to_fl(fl<S>& a) const
      void symbol_exp<S>::subexp_to_fl(fl<S>& a) const
      void star_exp<S>::subexp_to_fl(fl<S>& a) const
      void plus_exp<S>::subexp_to_fl(fl<S>& a) const
      void cat_exp<S>::subexp_to_fl(fl<S>& a) const

    These functions are public members of the template classes declared 
    in classes/re/re.h (re and subclasses of subexp).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/10         Added header and comments


 ***************************************************************************/




/***************************************************************************

                     void re<S>::retofl(fl<S>& a) const

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This function converts a regular expression to
    a finite language.  Note that any regular expression which includes
    a Kleene star term cannot be represented as a finite language (unless
    the star is applied to the empty string).  If this function is called
    on such an expression, it will be converted anyway, but the star will
    be ignored (for example, the fm produced for "(a+b)*c" will be 
    equivalent to "(a+b)c").  After execution, this re will be unchanged
    and the parameter fl will hold the new finite language.

    This function can be called in the following way:
      this_re.retofl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this re.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
re<S>::retofl(fl<S>& a) const
{
	a.clear();
	if (p == 0)
		return;

	p->subexp_to_fl(a);
}



/***************************************************************************

          inline void empty_set<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class empty_set (declared 
    in classes/re/re.h).  This function converts a regular subexpression
    which represents the empty set to a finite language.  The parameter fl
    will store the resulting empty language.

    This function can be called in the following way:
      this_empty_set.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this empty_set.

  Return Value:  none

 ***************************************************************************/

template <class S>
inline void
empty_set<S>::subexp_to_fl(fl<S>& a) const
{
	a.clear();
}



/***************************************************************************

            void empty_string<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class empty_string
    (declared in classes/re/re.h).  This function converts a regular 
    subexpression which represents the empty string to a finite language.  The
    parameter fl will store the resulting language.

    This function can be called in the following way:
      this_empty_string.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this empty_string.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
empty_string<S>::subexp_to_fl(fl<S>& a) const
{
	string<S>	tmp;

	a += tmp;
}



/***************************************************************************

             void symbol_exp<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class symbol_exp
    (declared in classes/re/re.h).  This function converts a regular 
    subexpression which represents a single symbol to a finite language.  The
    parameter fl will store the resulting language.

    This function can be called in the following way:
      this_symbol_exp.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this symbol_exp.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
symbol_exp<S>::subexp_to_fl(fl<S>& a) const
{
	string<S>	tmp;

	tmp += content;
	a += tmp;
}



/***************************************************************************

               void star_exp<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class star_exp (declared 
    in classes/re/re.h).  This function converts a regular subexpression
    which represents a starred expression to a finite language.  Since
    there is no equivalent finite language for starred expressions (unless
    the starred expression is the empty string or empty set), the conversion
    done by this function is not correct:  the resulting finite language will
    represent the expression without its star.  For example, the fl 
    produced for "(ab+c)*" will be equivalent to "(ab+c)".  Note that the
    fl produced for "{}*" will be equivalent to {}, not {empty_string}.

    This function can be called in the following way:
      this_star_exp.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this star_exp.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
star_exp<S>::subexp_to_fl(fl<S>& a) const
{
	left->subexp_to_fl(a);
}



/***************************************************************************

              void plus_exp<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class plus_exp (declared 
    in classes/re/re.h).  This function converts a regular subexpression
    which represents a union expression to a finite language.  Note that any 
    regular expression which includes a Kleene star term cannot be represented
    as a finite language (unless the star is applied to the empty string).  
    If this function is called on such an expression, it will be converted 
    anyway, but the star will be ignored (for example, the fm produced for 
    "a*+c" will be equivalent to "a+c").  The parameter fl will 
    store the resulting language.

    This function can be called in the following way:
      this_plus_exp.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this plus_exp.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
plus_exp<S>::subexp_to_fl(fl<S>& a) const
{
	fl<S> b;

	left->subexp_to_fl(a); 
	right->subexp_to_fl(b);
	a += b;
}



/***************************************************************************

               void cat_exp<S>::subexp_to_fl(fl<S>& a) const

  Description:
    This function is a public member of the template class plus_exp (declared 
    in classes/re/re.h).  This function converts a regular subexpression
    which represents a catenated expression to a finite language.  Note that 
    any regular expression which includes a Kleene star term cannot be 
    represented as a finite language (unless the star is applied to the empty 
    string).  If this function is called on such an expression, it will be 
    converted anyway, but the star will be ignored (for example, the fm 
    produced for "a*c" will be equivalent to "ac").  The parameter fl will 
    store the resulting language.

    This function can be called in the following way:
      this_cat_exp.subexp_to_fl(new_fl);

  Parameters:
    fl<S>& a - holds the fl which is created from this cat_exp.

  Return Value:  none

 ***************************************************************************/

template <class S>
void
cat_exp<S>::subexp_to_fl(fl<S>& a) const
{
	fl<S> b;

	left->subexp_to_fl(a);
	right->subexp_to_fl(b);
	a *= b;
}
