//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	January 1994


/***************************************************************************

  File:  classes/re/cat.src
  -----

  Description:
  ------------
    This file contains the definition of the following functions:
      re<S>& re<S>::operator^=(const re<S>& r)
      re<S>& re<S>::operator^=(re<S>* r)
      re<S>& re<S>::cat(subexp<S>* s)

    These functions are public members of the template class re (declared 
    in classes/re/re.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/08         Added header and comments


 ***************************************************************************/




/***************************************************************************

                re<S>& re<S>::operator^=(const re<S>& r)

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This function catenates the parameter expression
    to the current contents of expression and stores the result in
    this re.  If this re originally contained (a+b) and r contains b*, the
    result of this function would be (a+b)b*.  The function returns a 
    reference to this re.

    This function can be called in the following ways:
      this_re.operator^=(other_re);
      this_re ^= other_re;

  Parameters:
    const re<S>& r - the expression to be catenated to this expression

  Return Value:
    re<S>& - a reference to this expression

  
 ***************************************************************************/

template <class S>
re<S>&
re<S>::operator^=(const re<S>& r)
{
	if (r.is_clear())
		return *this;

	if (p == 0)
	{
		p = r.clone();
		return *this;
	}

	cat_exp<S>* ptr = new cat_exp<S>;
	ptr->left = p;
	ptr->right = r.clone();
	p = ptr;
	return *this;
}



/***************************************************************************

                    re<S>& re<S>::operator^=(re<S>* r)

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This function catenates the parameter expression
    to the current contents of this expression and stores the results in
    this re.  If this re originally contained (a+b) and r points to an
    expression which contains b*, the result of this function would be 
    (a+b)b*.  The function returns a reference to this re.

    This function can be called in the following ways:
      this_re.operator^=(other_re_ptr);
      this_re ^= other_re_ptr;

  Parameters:
    re<S>* r - a pointer to the expression to be catenated to this expression

  Return Value:
    re<S>& - a reference to this expression

  
 ***************************************************************************/

template <class S>
re<S>&
re<S>::operator^=(re<S>* r)
{
	if (r->is_clear())
		return *this;

	if (p == 0)
	{
		p = r->clone();
		return *this;
	}

	cat_exp<S>* ptr = new cat_exp<S>;
	ptr->left = p;
	ptr->right = r->clone();
	p = ptr;
	return *this;
}



/***************************************************************************

                       re<S>& re<S>::cat(subexp<S>* s)

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This function catenates the parameter subexpression
    to current contents of this expression and stores the results in
    this re.  If this re originally contained (a+b) and s points to a
    subexpression which contains b*, the result of this function would be 
    (a+b)b*.  The function returns a reference to this re.

    This function can be called in the following ways:
      this_re.operator^=(other_subexp_ptr);
      this_re ^= other_subexp_ptr;

  Parameters:
    subexp<S>* s - a pointer to the subexpression to be catenated to this
                   expression

  Return Value:
    re<S>& - a reference to this expression


 ***************************************************************************/

template <class S>
re<S>&
re<S>::cat(subexp<S>* s)
{
        if (s == 0)
                return *this;

        if (p == 0)
        {
                p = s;
                return *this;
        }

        cat_exp<S>* ptr = new cat_exp<S>;
        ptr->left = p;
        ptr->right = s;
        p = ptr;
        return *this;
}
