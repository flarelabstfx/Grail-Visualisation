//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	September 1995


/***************************************************************************

  File:  classes/fm/states.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      set<state>& fm<Label>::states(set<state>& s) const

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/09         Added header and comments

 ***************************************************************************/




/***************************************************************************

           set<state>& fm<Label>::states(set<state>& s) const

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function retrieves all the states in this
    fm and stores them in the parameter set.  The function returns a
    reference to the set.

    This function can be called in the following way:
      this_fm.states(state_set);

  Parameters:
    set<state>& s - the set to hold the states

  Return Value:
    set<state>& - a reference to the set of states
  
 ***************************************************************************/

template <class Label>
set<state>&
fm<Label>::states(set<state>& s) const
{
	int 		i;
	list<state>	l;

	bits	map(max_state().value());
	map.clear();

#ifdef	ATT
	for (i=0; i<start_states.size(); ++i)
		map.Set(start_states[i].value());

	for (i=0; i<final_states.size(); ++i)
		map.Set(final_states[i].value());
#endif
#ifndef	ATT
	for (i=0; i<start_states.size(); ++i)
		map.set(start_states[i].value());

	for (i=0; i<final_states.size(); ++i)
		map.set(final_states[i].value());
#endif

	for (i=0; i<arcs.size(); ++i)
	{
#ifdef	ATT
		map.Set(arcs[i].get_sink().value());
		map.Set(arcs[i].get_source().value());
#endif
#ifndef	ATT
		map.set(arcs[i].get_sink().value());
		map.set(arcs[i].get_source().value());
#endif
	}

	int q = 0;

	for (int k=-1; q != -1; k = q)
	{
		if ((q = map.next(k)) == -1)
			break;
		state r = q;
		l += r;
	}

	s.from_list(l);

	return s;
}
