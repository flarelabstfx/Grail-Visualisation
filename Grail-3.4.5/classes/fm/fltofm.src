//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995


/***************************************************************************

  File:  classes/fm/fltofm.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::fltofm(const fl<Label>& lang)

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/10         Added header and comments

 ***************************************************************************/




/***************************************************************************

             void fm<Label>::fltofm(const fl<Label>& lang)

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function converts the parameter fl to an fm
    which accepts the same language.  The resulting fm will have one start 
    state, and will be deterministic, but not necessarily minimal.

    This function can be called in the following way:
      this_fm.fltofm(lang_to_convert);

  Parameters:
    const fl<Lable>& lang - the finite language to convert

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::fltofm(const fl<Label>& lang)
{
	set<string<Label> >	words;
	int			next_state = 0;
	inst<Label>		tmpinst;
	state			start;
	state			curr;
	state			next;
	list<inst<Label> >	t;

 	clear();
	lang.get_words(words);

	// if no words, empty machine
	if (words.size() == 0)
		return;

	// add one start state
	start = next_state++;
	start_states += start;  
	int i,j,k; //variables to control loops. By SH 05/20/2005
	

	for (i=0; i<words.size(); ++i)
	{
		curr = start;
		for (j=0; j<words[i].size(); ++j)
		{
			for (k=0; k<t.size(); ++k)
				if ((t[k].get_source() == curr) &&
				    (t[k].get_label() == words[i][j]))
					break;
			if (k == t.size()) // if existing arc not found
			{
				// at this point, it is faster if we
				// bypass the rest of the loop
				// and just add transistions manually
				for(;j<words[i].size();j++)
				{
					next=next_state++;
					t+=tmpinst.assign(curr,words[i][j],next);
					curr=next;
				}
				break; // shouldn't need, but just in case
			}
			else
				curr = t[k].get_sink();
		}
		final_states += curr;
	}
	arcs.from_list(t);
}	
