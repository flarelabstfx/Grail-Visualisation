//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	May 1995

//
// Implementation of Mealy Machine. 
//
// todo:  add filters in main program for Mealy Machines
//

template <class Input, class Output>
int
mealy<Input, Output>::deterministic_execution(const string<Input>& wd, string<Output>& results, const int verbose) const
{
	int			i;
	set<state>		end;
	mealy<Input, Output>	bunch;
	set<state>		current;
	Input			r;

	// check that machine is deterministic

	if (!is_deterministic())
	{
		std::cerr << "cannot execute nondeterministic mealy machine"; 
		return -1;
	}

	// begin with start states

	current = this->start_states[0];

	// do for all characters

	for (i=0; i<wd.size(); ++i)
	{
		r = wd[i];

		// get the target set

		select(r, current[0], SOURCE, bunch);

		// if there are no states, return

		if (bunch.size() == 0)
		{
			if (verbose)
			      std::cout << "no states acccessible on " << r << "\n";
			return 0;
		}

		// else, target set is the new start set

		bunch.sinks(current);

		if (verbose)
			std::cout << "on " << r << " take instructions\n" << bunch;

		// output corresponding symbol

		results += bunch[0].get_label().get_right();
	}

	// exhausted the string; now test for a final state in the set

	end.intersect(this->final_states, current);

	if (end.size() != 0)
	{
		if (verbose)
			std::cout << "terminate on final states " << end << "\n";
		return 1;
	}
	else
		return 0;
}
