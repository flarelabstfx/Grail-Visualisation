//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995


/***************************************************************************

  File:  classes/fl/lquot.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      fl<Item>& fl<Item>::left_quotient(const string<Item>& s)

    This function is a public member of the template class fl (declared 
    in classes/fl/fl.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/05         Added header and comments (adapted from
                                    Release Notes for Grail Version 2.5 by
                                    Darrell Raymond and Roger Robson)

 ***************************************************************************/




/***************************************************************************

          fl<Item>& fl<Item>::left_quotient(const string<Item>& s)

  Description:
    This function is a public member of the template class fl (declared 
    in classes/fl/fl.h).  This function computes the left quotient of this
    finite language and the parameter string and stores the resulting language
    in this fl.  The left quotient of any language L and a string x is 
    defined as the language of all words y such that xy is in L.  The left 
    quotient of any language L with the empty string yields the language L.
    The left quotient of the empty language and any string yields the empty 
    language.  The function returns a reference to this fl.

    This function can be called in the following way:
      this_fl.left_quotient(a_string);

  Parameters:
    const string<Item>& s - the string to match.

  Return Value:
    fl<Item>& - a reference to this fl.


 ***************************************************************************/

template <class Item>
fl<Item>&
fl<Item>::left_quotient(const string<Item>& s)
{
	set<string<Item> >	res;	// new set of words after quotient
	string<Item>		tmp;	// temporary storage for word

	// loop through all the words in this fl
	int i,j;  //variables to control the loops. By SH 05-19-2005
	for (i=0; i<size(); ++i)  
	{
		// if this word can contain the parameter word
		if (words[i].size() >= s.size())
		{
			// check to see if we have a match
			for (j=0; j<s.size(); ++j)
				if (words[i][j] != s[j])
					break;

			// if so, add the right part of the word to the
			//  new set of words
			if (j == s.size())
			{
				tmp.clear();
				for (j=s.size(); j<words[i].size(); ++j)
					tmp += words[i][j];
				res += tmp;
			}
		}
	}
	words = res;
	
	return *this;
}
