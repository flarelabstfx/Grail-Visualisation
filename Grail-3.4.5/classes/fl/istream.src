//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	December 1995


/***************************************************************************

  File:  classes/fl/istream.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      template <class Item> istream& operator>>(istream& is, fl<Item>& s)

    This function is a public member of the template class fl (declared
    in classes/fl/fl.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/05         Added header and comments (adapted from
                                    Release Notes for Grail Version 2.5 by
                                    Darrell Raymond and Roger Robson)
	 Jason Smith							Used disjoint_union for adding words

 ***************************************************************************/




/***************************************************************************

     template <class Item> istream& operator>>(istream& is, fl<Item>& s)

  Description:
    This function is a public member of the template class fl (declared
    in classes/fl/fl.h).  This function allows an fl (finite language) to be
    read from an input stream.  Each word is expected to be followed by
    a carriage return (either \13 \10 or \13).  Normally this will mean that
    each word is on a separate line in the file.  The input is done using
    operator>> for string<Item>.  The input stream should be valid and
    open before calling this function.  The function returns a reference to
    the input stream.

    This function can be called in the following ways:
      operator>>(input_stream, language);
      input_stream >> language;

  Parameters:
    istream& is - the input stream.
    fl<Item>& s - the fl which will hold the language which is read in.

  Return Value:


 ***************************************************************************/

#define BUF_SIZE 512


	//UGO start
	inline int is_eol(char ch)
	{
	return (ch == 10 || ch == 13);
	}

	inline int is_ws(char ch)
	{
	return ((ch <= 32) && (!is_eol(ch)));
	}
	//UGO end












template <class Item>
std::istream&
operator>>(std::istream& is, fl<Item>& s)
{
	string<Item>	element;   // temp string to store each word
	static char	buffer[BUF_SIZE];
	char		tmp=0;     // temp char to store input
	int		index;

	while (!is.eof())
	{
		// prepare for new word
		element.clear();
		index = 0;

		if (tmp == 0)		// if first time through, get a char
			is.get(tmp);

		// eat up all the ws
		while ((is_ws(tmp)) && (!is.eof()))
			is.get(tmp);

		if (is.eof())
			break;

		if (!is_eol(tmp)) // if null string, do nothing
		{
			while ((!is_ws(tmp)) && (!is.eof()) && (!is_eol(tmp)))
			{
				if (index > BUF_SIZE-2)
					exit(1);

				buffer[index++] = tmp;
				is.get(tmp);
			}
		}

		while ((is_ws(tmp)) && (!is.eof()))
			is.get(tmp);

		if ((tmp == 10) && (!is.eof())) 	// line feed
		{
			is.get(tmp);
			if ((tmp == 13) && (!is.eof())) // carriage return
				is.get(tmp);
		}
		else if ((tmp == 13) && (!is.eof()))
		{
			is.get(tmp);
			if ((tmp == 10) && (!is.eof()))
				is.get(tmp);
		}

		element.clear();
		if (index > 0)
		{
			std::istrstream str(buffer, index);
			str >> element;
		}
		s.words.disjoint_union(element); // Changed in Grail 3.1
	}

	return is;
}
/*
template <> inline int is_eol(char ch)
{
	return (ch == 10 || ch == 13);
}

template <> inline int is_ws(char ch)
{
	return ((ch <= 32) && (!is_eol(ch)));
}
*/
