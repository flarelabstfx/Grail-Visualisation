//#This comes from 3.1.4-new
/******************************************************************************************
 File:  classes/afa/dnf/function.src
 -----
 Description:
 ------------
        This file contains the definitions of the following functions:

			funct::funct(const funct& f)
			funct::funct(const term& t)
			funct::~funct()
		int     funct::numterms()
		void    funct::append(const term& t)
		void    funct::append(const funct& f)
		funct&  funct::operator=(const funct& f)
		term*   funct::search (const term& t) const
		int     funct::evaluate (unsigned n)const
		void    funct::remove (const term& t)
		void    funct::remove(term* tp)
		void    funct::leftshift(int k)
		funct   funct::and(const term& f) const
		funct   funct::and(const funct& f)const
		funct   funct::not() const
		void    funct::simplify()
		void    funct:: simplify2()

	All of these functions are public members of the "funct" class
        declared in function.h.

/******************************************************************************************
/******************************************************************************************
 Revision History:
 -----------------
 X. Wu                   Initial version of source code
 S. Huerter 08/11/98     simplify2(), header and comments

******************************************************************************************/
//#include "function.h"
//#include <math.h>
//#include <cmath> //by SH 05/26/2005
//#include "../manage_bitvec.src"
/******************************************************************************************

				funct::funct(const funct& f)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function is a copy constructor for objects of type funct. Function f is
	copied to this funct.

Parameters:
	const funct& f				-the funct to copy to this funct

******************************************************************************************/
funct::funct(const funct& f)
     {
       *this = f;
     }
/******************************************************************************************

				funct::funct(const term& t)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function is a copy constructor for objects of type funct. Term t is
	assigned to this funct.

Parameters:
	const term& t				-the term to copy to this funct

******************************************************************************************/
funct::funct(const term& t)
     {
       head = new term(t);
     }
/******************************************************************************************

				      funct::~funct()

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function is the destructor for objects of type funct.

******************************************************************************************/
funct::~funct()
     {
       term* tmp=head;
       while (tmp !=0)
         {
	   head =head->get_next();
           delete tmp;
           tmp = head;
	 }
     }
/******************************************************************************************

				int funct::numterms()

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function determines the number of terms contained in this funct.

Return Value:
	int 			-the number of terms contained in this funct

******************************************************************************************/
int funct::numterms()
{
 term *ptr = head;
 int  count = 0;
 while(ptr != 0)
	{
	count ++;
	ptr = ptr->get_next();
	}
return count;
}
/******************************************************************************************

				void funct::append(const term& t)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function "OR"'s term t onto this funct if term t is not already contained
	in this funct.

Parameters:
	const term& t			-the term to "OR" on to this funct

******************************************************************************************/
void funct::append(const term& t)
      {
	 if (search(t) != 0)        //t is already on the list of the function
	   return;

         term* tmp1=head, *tmp2;
	 if (tmp1 ==0)              //the function has no term on it
           {
             head = new term(t);
             head->set_next(0);
             return;
           }

         while (tmp1 !=0)           //find the position of the last term on the
           {                        //function
	     tmp2 = tmp1;
	     tmp1 = tmp1->get_next();
	   }

	 //append a copy of term t at the end of the function
	 tmp1 =new term(t);
         tmp1->set_next(0);
         tmp2->set_next(tmp1);
       }
/******************************************************************************************

				void funct::append (const funct& f)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
 	All terms t in funct f which are not already contained in this funct are "OR"'d
	on to the end of this funct.

Parameters:
	const funct& f			-the funct to "OR" on to this funct

******************************************************************************************/
void funct::append(const funct& f)
     {
       funct newf(*this);             //copy this function to newf to avoid
                                      //recursive appending
       term* tptr =f.head;
       while (tptr != 0)
	 {
	   newf.append(*tptr);
	   tptr = tptr->get_next();
	 }
       head = newf.head;
       newf.head = 0;
     }
/******************************************************************************************

			funct& funct::operator=(const funct& f)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function assigns funct f to this funct.

	This function can be called in the following way(s):
		my_funct = that_funct;

Parameters:
	const funct& f			-the funct to assign to this funct

Return Value:
	funct&				-reference to this funct

******************************************************************************************/
funct& funct::operator=(const funct& f)
       {
	 funct newf;            //create a new empty function
         term* tptr =f.head;
         while (tptr != 0)
	   {
	     newf.append(*tptr);  //append each term on f to the newf function
	     tptr = tptr->get_next();
	   }
  	 head = newf.head;      //set the head of the function to be the head
	                        //of the newf function
	 newf.head = 0;         //set the head of newf function to be zero to
	                        //avoid destruction of the created function
	 return *this;

       }
/******************************************************************************************

			term* funct::search (const term& t) const

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function looks on this funct for term t.

	This function can be called in the following way(s):
		search_term_ptr = my_func.search(search_term);

Parameters:
	const term& t			-the term to look for

Return Value:
	term*				-pointer to the term (0 if not found)

******************************************************************************************/
term* funct::search (const term& t) const
      {
	term* tmp = head;
        while ((tmp != 0) && ( *tmp != t))
	  tmp = tmp->get_next();
	return tmp;
      }
/******************************************************************************************

			int funct::evaluate (unsigned n)const

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function evaluates this funct at truth assignment n.

	This function can be called in the following way(s):
		value = myfunc.evaluate(n);

Parameters:
	unsigned n			-the truth assignment to eval this funct at

Return Value:
	int				-the Boolean value of this funct at n

******************************************************************************************/
int funct::evaluate (unsigned n)const
    {
      int result = 0;
      term* tmp=head;

//go through the terms of this function to evaluate the integer on each term
      while (tmp != 0)
	{
	  result=tmp->evaluate(n);
	  if (result == 1)            //do not need go further
	    break;
	  else
	    tmp = tmp->get_next();
	}
      return result;
    }
/******************************************************************************************

			void funct::remove (const term& t)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function removes term t from this funct.

	This function can be called in the following way(s):
		myfunct.remove(t);

Parameters:
	const term& t			-the term to remove

******************************************************************************************/
void funct::remove (const term& t)
     {
       term* ptr=head, *tmp;
       if (head == 0)        //if no term on the function just do nothing
	 return;

//if the first term of the function is equal to t, free the first node of the
//function and set the head of the function to the next
       if (*head == t)
         {
           head =head->get_next();
	   ptr->set_next(0);
           delete ptr;
           return;
         }

//go through the terms on the function to see if there is a term equal to
//the given term. if it does, remove it
       tmp = ptr->get_next();
       while (tmp !=0)
	 {
	   if (*tmp == t)
	     {
	       ptr->set_next(tmp->get_next());
	       tmp->set_next(0);
	       delete tmp;
	       return;
	     }
	   else
	     {
	       ptr = tmp;
	       tmp = tmp->get_next();
	     }
	 }
     }
/******************************************************************************************

				void funct::remove(term* tp)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function removes the term pointed to by tp from this funct.

	This function can be called in the following way(s):
		myfunct.remove(term_pointer);

Parameters:
	term* tp			-pointer to the term to remove.

******************************************************************************************/
void funct::remove(term* tp)
{
	term* ptr = head, *tmp;
	if (head == 0)
	   return;

	if (tp == head)
	   {
	      head = head->get_next();
	      tp->set_next(0);
	      return;
	   }

	tmp = ptr->get_next();
	while (tmp != 0)
	   {
		if (tmp == tp)
		   {
			ptr->set_next(tmp->get_next());
			tp->set_next(0);
			return;
		   }
		else
		   {
			ptr = tmp;
			tmp = tmp->get_next();
		   }
	   }

}
/******************************************************************************************

				void funct::leftshift(int k)

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function shifts the alpha and beta private members of each term of this funct
 	to the left by k bits.

	This function can be called in the following way(s):
		myfunct.leftshift(num)

Parameters:
	int k			-number of bits to shift by

******************************************************************************************/
void funct::leftshift(int k)
{
  term* tmp =head;
  while (tmp != 0)
    {
      tmp->leftshift(k);
      tmp = tmp->get_next();
    }
}
/******************************************************************************************

				funct funct::and(const term& t) const

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function returns the conjunction of this funct and term t.

	This function can be called in the following way(s):
		conj_func = myfunc.and(term1);

Parameters:
	const term& t			-the term to be ANDed on to this funct

Return Value:
	funct 				-the conjunction of this funct and term t

******************************************************************************************/
//do the logical AND operation of this function and term, i.e. (*this) AND (f)
//return the new conjunction function
funct funct::and1(const term& f) const //by SH 05/23/2005
{
  funct newfunct;       //variable to hold the conjunction function
  term* tmp=head;       //local variable for travel through the terms of the funct
  unsigned falpha = f.get_alpha();
  unsigned fbeta  = f.get_beta();

//if the term is a constant term, special treatment has be taken
  if (falpha == 0)
    if (fbeta == 1)     //term f is constant 0
      {
	term t(0,1);
	newfunct.append(t);
	return newfunct;
      }
    else                //term f is constant 1
      {
        newfunct = *this;
        return newfunct;
      }

//if the term f is not constant, go through the term list of the function to do
//logical and of each term with term f
  int indicator = 0;
  while (tmp != 0)
    {
//      int indicator = 0;
      unsigned alpha =tmp->get_alpha();
      unsigned beta = tmp->get_beta();
      if (alpha == 0)                   //if the current term is a constant
	if(beta == 1)                   //current term is constant 0
	  {
	    term t(0,1);
	    if (indicator == 0)         //the first term for the newfunction
	      {
       	        newfunct.append(t);
		indicator = 1;          //means that has at least one term on
	      }
	    tmp = tmp->get_next();
	  }
        else                            //current term is constant 1
	  {
	    term t(falpha, fbeta);
	    newfunct.append(t);
	    indicator = 1;              //newfunction has at least one term on it
	    tmp = tmp->get_next();
	  }
      else                              //current term is not a constant
	{
	  term t;
	  unsigned a=0, b=0;
	  for (int i = 0; i<32; i++)
	    {
	      unsigned test = (unsigned) pow((double)2,(double)i);
	      if((alpha & test)==0)     //xi and ~xi doesn't appear in current term
	        {
		  if ( (falpha & test) != 0)    //xi or ~xi appear in f
		    {
		      a += test;
       		      if ( (fbeta & test) !=0)
		        b += test;
		    }
	        }
	      else                      //xi or ~xi appear in the current term
	        {
		  if ( (falpha & test)==0)     //xi and ~xi doesn't appear in f
		    {
		      a +=test;
		      if ( (beta & test)!=0)   //xi appears in f
			b += test;
		    }
		  else if((fbeta & test) == 0) //~xi  appeares in f
		    {
		      if ((beta & test)==0)    //xi doesn't appear in current term
			a += test;
		      else              //xi appears in current term
			{               //current term AND f is constant 0
			  a = 0;
			  b = 1;
			  break;
			}
		    }
		  else                  //xi appears in f
		    {
		      if( (beta & test)!=0)
			{
			  a +=test;
			  b += test;
			}
		      else              //~xi appears in the current term
			{
			  a = 0;
			  b = 1;
			  break;
			}
		    }
	        }
	    }
	  t.set_alpha(a);
	  t.set_beta(b);
	  term zero(0,1), one(0,0);
	  if ((t == zero)&& (indicator==0))
	    {
	      newfunct.append(t);
	      indicator = 1;
	    }
	  else if ((t == one))
	    {
	      funct anotherf(t);
	      return anotherf;
	    }
	  if (t != zero)
	    {
	      newfunct.append(t);
       	      indicator = 1;
	    }
	  tmp = tmp->get_next();
	}
    }
  term zero(0,1);
  if ((newfunct.head)->get_next() != 0)
    newfunct.remove(zero);            //if the function has two term on it
                                      //zero term has no use
  return newfunct;
}
/******************************************************************************************

				funct funct::and(const funct& f)const

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function returns the conjunction of this funct and funct f.

	This function can be called in the following way(s):
		conj_func = func1.and(func2);

Parameters:
	const term& t			-the term to be ANDed on to this funct

Return Value:
	funct 				-the conjunction of this funct and funct f

******************************************************************************************/
funct funct::and1(const funct& f) const //by SH 05/23/2005
{
  term* t = f.head;
  if (t == 0)
   	 return *this;
  else
    {
        funct andfunction;
        while (t != 0)
	    {
 		funct tmp = *this;
      		tmp = tmp.and1(*t); //by SH 05/23/2005
		andfunction.append(tmp);
      		t = t->get_next();
   	     }
	andfunction.simplify();
        return andfunction;
    }
}
/******************************************************************************************

				funct funct::not() const

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function returns the negation of this funct.  It is assumed that this funct
	contains at least one term.

	This function can be called in the following way(s):
		neg_func = func1.not()

Return Value:
	funct 				-the negation of this funct

******************************************************************************************/
funct funct::not1() const //by SH 05/23/2005
{
  funct negation;
  term* tmp = head;
  term _false(0,1), _true(0,0); //by SH 05/24/2005
  negation.append(_true); //by SH 05/24/2005
  while (tmp != 0)
    {
      if (*tmp == _false)         //if the current term is constant 0 //by SH 05/24/2005
	{
	  term t(0,0);           //negation of 0 is 1
	  negation = negation.and1(t);  //by SH 05/23/2005
	  return negation;       //the function has only one term
	}
      else if (*tmp == _true)     //if the current term is constant 1 //by SH 05/24/2005
	{
	  term t(0,1);           //negation of 1 is 0
	  negation = negation.and1(t);  //by SH 05/23/2005
	  return negation;       //the function has only one term
	}
      else                       //the current term is not a constant
	{
	  funct cur;             //to hold the negation of current term
	  for (int i=0; i<32; i++)
	    {
	      unsigned test = (unsigned) pow((double)2,(double)i);
	      unsigned alpha = tmp->get_alpha();
	      unsigned beta = tmp->get_beta();
	      if ((alpha & test) != 0)     //xi or ~xi appear in the current term
		if ((beta & test)!= 0)    //xi appears in the current term
		  {
		    term newt(test,0);
		    cur.append(newt);
		  }
	        else                    //~xi appears in the current term
		  {
		    term newt(test,test);
		    cur.append(newt);
		  }
	    }
	  negation = negation.and1(cur); //by SH 05/23/2005
	  tmp = tmp->get_next();
	}
    }

  negation.simplify();
  return negation;
}
/******************************************************************************************

				void funct::simplify()

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	Two rules are recursively used on this funct to obtain a reasonable simplification:
	(i) For two terms t1,t2 defined on set S={x1,..,xn} and its dual set ~S,
		(t1 <= t2) -> ((t1 OR t2)=t1)
	    Where <= means that every Boolean variable which appears in t1 appears in t2 in
	    the same form.
	(ii)If t1 = t3(y)t4 and t2 = t3(~y)t4 for some terms t3,t4 and some variable y in S,
            then (t1 OR t2) = t3t4

	This function can be called in the following way(s):
		my_func.simplify();

******************************************************************************************/
void funct::simplify()
{
  if ((head == 0)||(head->get_next() == 0))
    return;
  term* ptr1 = head, *ptr2=head;
  int indic;           //to indicate if there is a simplification or not

//go through the term list of the function, for any two terms pointed
//by ptr1, and ptr2, if they can be combined, combine them and put the result
//term to the place pointed by ptr1 and delete the term pointed by ptr2, then
//set ptr2 to the head pointer and go through the list of terms. Otherwise
//advance ptr1 to the next term and ptr2 to the next term pointed by ptr1 and go
//through the rest of the terms on the list.

  while (ptr1 !=0)
    {
      indic = 0;               //means there is no combine of terms
      while (ptr2 != 0)        //ptr2 go through the list of terms till the end
	{
	  if (ptr2 == ptr1)    //if ptr2 and ptr1 point to the same term
	    {
	      ptr2 = ptr2->get_next();   //advance ptr2 to the next term
	    }
	  if(ptr2 != 0)                  //avoid that the ptr2 points to nothing
	    {
		indic = ptr1->combine(*ptr2);   //do the combination

		if (indic == 1)                 //if they can be combined
		  {
		     remove(ptr2);
		     delete ptr2;
		     break;
		  }
		else
		  ptr2 = ptr2->get_next();
	    }
	}
      if (indic == 1)                   //there is a combining
	{
	  ptr2 = head;                  //have to go through terms from begin
	}
      else
	{
	  ptr1 = ptr1->get_next();      //no combining, advancing to next term
	  if (ptr1 != 0)
	    ptr2 = ptr1->get_next();
	}
    }
 }
/******************************************************************************************

				void funct::simplify2()

Description:
	This function is a public member of the "funct" class (declared in "functios.h").
	This function is exactly the same as the above, except a different (much faster)
	version of combine(.,.) (public member of "term" class) is used.  To use this
	version of simplify, the terms in this function must have their dimension member
	set.

	This function can be called in the following way(s):
		my_func.simplify();

******************************************************************************************/
void  funct:: simplify2()
{
if ((head == 0)||(head->get_next() == 0))
    return;

  term* ptr1 = head, *ptr2=head;
  int indic;                              //to indicate if there is a simplification or not
  int dim = head->get_dim();              //the dimension of the initial minterms
  unsigned *ord_inv = build_ordinv(dim);  //to get term weights quickly

//go through the term list of the function, for any two terms pointed
//by ptr1, and ptr2, if they can be combined, combine them and put the result
//term to the place pointed by ptr1 and delete the term pointed by ptr2, then
//set ptr2 to the head pointer and go through the list of terms. Otherwise
//advance ptr1 to the next term and ptr2 to the next term pointed by ptr1 and go
//through the rest of the terms on the list.

  while (ptr1 !=0)
    {
      indic = 0;               //means there is no combine of terms
      while (ptr2 != 0)        //ptr2 go through the list of terms till the end
	{
	  if (ptr2 == ptr1)    //if ptr2 and ptr1 point to the same term
	    {
	      ptr2 = ptr2->get_next();   //advance ptr2 to the next term
	    }
	  if(ptr2 != 0)                  //avoid that the ptr2 points to nothing
	    {
		indic = ptr1->combine(*ptr2,ord_inv);   //do the combination

		if (indic == 1)                 //if they can be combined
		  {
		     remove(ptr2);
		     delete ptr2;
		     break;
		  }
		else
		  ptr2 = ptr2->get_next();
	    }
	}
      if (indic == 1)                   //there is a combining
	{
	  ptr2 = head;                  //have to go through terms from begin
	}
      else
	{
	  ptr1 = ptr1->get_next();      //no combining, advancing to next term
	  if (ptr1 != 0)
	    ptr2 = ptr1->get_next();
	}
    }
 }
