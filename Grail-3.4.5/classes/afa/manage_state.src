//#This comes from 3.1.4-new
#ifndef _STATE_ARC
#define _STATE_ARC
/******************************************************************************************
 File: 	classes/afa/manage_state.src
 -----

 Description:
 ------------
	This file contains the definition of the "state_node" class,
	as well as the definition of the following functions: 

		int state_node::compare(const state_node& s)
		state_node build_state_node (const state& s, int count)
		state_node build_state_node (const fm<T>& a, const state& s)
		int find_min_state(state_node* p, int n)
		void sort_state (state_node* p, int n)

	The first function is a public member of the state_node class.  All functions
	are used by the public member of the afa class "fmtoafa(.)". This class is
	declared in "afa.h".    

 Revision History:
 -----------------
	X. Wu				 Initial version of source code
	S. Huerter			 Header and comments
	
******************************************************************************************/
class state_node{
 public:
       state     stat;
       int       count;    //interpreted as # incoming transitions to the state
			   //under the transition function of the machine with state
	
       state_node(){count = 0;}				//default constructor
       state_node(const state_node& a)			//copy constructor
	 {stat =a.stat; count = a.count;}
       state_node(const state& s, int n)		//init. constructor
	 {stat = s; count = n;}
       state_node& operator=(const state_node& a)	//equality
	 {stat=a.stat; count = a.count; return *this;}
       int compare(const state_node& s);		//comparison of count
     };
/******************************************************************************************

			int state_node::compare(const state_node& s)

Description:
	This function is a public member of the "state_node" class (declared above).
	This function compares the count members of this state node and the parameter
	state node s.

	This function can be called in the following way(s):	
		result = this.compare(s);

	Parameters:
		const state_node& s			-comparison state node

	Return Values:
		1				-if this state node has a larger count member
						 than the parameter state node
		0				-if this state node has the same count member
						 as the parameter state node
	       -1				-otherwise  

******************************************************************************************/
int state_node::compare(const state_node& s)
{
  if (count>s.count)
    return 1;
  else if(count == s.count)
    return 0;
  else
    return -1;
}
/******************************************************************************************

		state_node build_state_node (const fm<T>& a, const state& s)

Description:
	Assuming the parameter state s is a state of the parameter finite automaton a,
	this function constructs the state_node corresponding to state s. The count
	member of the new state_node is set to the number of incoming transitions 
	of state s under the transition function of a.
	
	This function can be called in the following way(s):	
		my_statenode  = build_state_nodeJ(my_fm, my_state);

	Parameters:
		const fm<T>& a				-finite automaton
		const state& s				-a state of machine a

	Return Values:
		state_node				-the state_node corresponding
							 to state s

******************************************************************************************/
template <class T>
state_node build_state_node (const fm<T>& a, const state& s) 
{
  set<inst<T> > tmp = get_arcs(a);
  int           size = tmp.size();
  inst<T>       tmpinst;
  int           count = 0;
  for (int i=0; i<size; i++)
    {
      tmpinst = tmp[i];
      if (tmpinst.sinkis(s) == 1) //if s is the sink of the current instruction
	count +=1;
    }
  state_node sn;
  sn.stat = s;
  sn.count = count;
  return sn;
}
/******************************************************************************************

		state_node build_state_node(const state& s, int count)

Description:
	Given a state and an integer (interpreted as the number of incoming transitions 
	to the state), this function builds the corresponding state_node.
	
	This function can be called in the following way(s):	
		my_statenode  = build_state_nodeJ(my_state, count);

	Parameters:
		const state& s				- a state
		int count				- the number of incoming transitions to s
							  (under some transition function)
	Return Values:
		state_node				-the state_node corresponding
							 to state s 

******************************************************************************************/
state_node build_state_node (const state& s, int count)
{
  state_node sn;
  sn.stat = s;
  sn.count = count;
  return sn;
}
/******************************************************************************************

			int find_min_state(state_node* p, int n)

Description:
	This function finds the position in the parameter state_node array (length n)  
	of the state_node with the smallest count member. 
	This function assumes that n>0.

	This function can be called in the following way(s):	
		position = find_min_state(my_array, length);

	Parameters:
		state_node* p				-array of state_nodes
		int n					-length of array p

	Return Values:
		int					-position in array p of state_node with
						         smallest count member

******************************************************************************************/
int find_min_state(state_node* p, int n)
{
  state_node s = p[0];
  int pos = 0;

  for (int i=0; i<n; i++)
    if (s.compare(p[i]) >= 0)
      {
        s = p[i];
	pos = i;
      }
  return pos;
}
/******************************************************************************************

			void sort_state(state_node* p, int n)

Description:
	This function sorts the parameter state_node array p (length n) in decreasing
	order of the count members.

	This function can be called in the following way(s):	
		sort_state(my_array, length);

	Parameters:
		state_node* p				-array of state_nodes
		int n					-length of array p

******************************************************************************************/
void sort_state (state_node* p, int n)
{
  int pos=0;
  state_node tmp;

  if (n <= 1)
    return;

  for (int i =n; i>1; i--)
    {
      pos = find_min_state (p, i);
      tmp = p[pos];
      p[pos] = p[i-1];
      p[i-1] = tmp;
    }
}
/******************************************************************************************/
#endif





