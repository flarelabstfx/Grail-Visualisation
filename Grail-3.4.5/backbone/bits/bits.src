//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project
//	No commercial use permitted without written consent.
//	June 1995

/***************************************************************************

  File:  classes/bits/bits.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      bits::bits(const int size) 
      bits::bits(const bits& f) 

    These functions are public members of the class bits (declared in bits.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/29         Added header and comments


 ***************************************************************************/




/***************************************************************************

                        bits::bits(const int size) 

  Description:
    This function is a public member of the class bits (declared in bits.h).  
    This is a constructor which allocates a bitmap of the size specified by 
    the parameter.  After the execution of this function, the bitmap has been 
    allocated and all bits are set to 0.

  Parameters:
    const int size - the number of bits requested in the bitmap

 ***************************************************************************/

bits::bits(const int size) 
{
	block = sizeof(unsigned int) * 8;     	// # of bits in unsigned int

	max = (size / block) + 1;             	// # of unsigned ints required
						// (+1 because / rounds down)
 						
	b = new unsigned int[max + 1];		// allocate bitmap (one extra
						// location so indexing is easy
	b[max] = 0;
	clear();

	sz = 0;
}



/***************************************************************************

                           bits::bits(const bits& f) 

  Description:
    This function is a public member of the template class bits 
    (declared in bits.h).  This a copy constructor.  After the execution of
    this function, this bitmap will be an identical copy of the parameter
    bitmap (block, max, sz and b are the same).

  Parameters:
    const bits& f - the bitmap to copy into this bitmap

 ***************************************************************************/

bits::bits(const bits& f) 
{
	// test for self assignment
	if (this == &f)
		return;

	// otherwise, allocate and initialize
	block = f.block;
	max = f.max;
	sz = f.sz;
	b = new unsigned int[max + 1];
	b[max] = 0;
	memcpy(b, f.b, sz * sizeof(unsigned int));
}
