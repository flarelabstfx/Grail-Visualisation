//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project
//	No commercial use permitted without written consent.
//	June 1995

/***************************************************************************

  File:  classes/bits/pluseq.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      bits& bits::operator+=(const bits& f) 

    This function is a public member of the class bits (declared in bits.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/29         Added header and comments


 ***************************************************************************/




/***************************************************************************

                 bits& bits::operator+=(const bits& f) 

  Description:
    This function is a public member of the class bits (declared in bits.h).
    This function appends the bits in the parameter bitmap to the existing 
    bits in this bitmap.  If this bitmap is not large enough to hold the 
    extra bits its size is either doubled or changed to sz + f.sz (its size 
    plus the parameter bitmap's size) depending on how much space is needed.

    This function can be called in the following ways:
      this_bitmap.operator+=(new_bits);
      this_bitmap += new_bits;

  Parameters:
    const bits& f - the bitmap to be appended to this bitmap

  Return Value:
    bits& - a reference to this bitmap
  
 ***************************************************************************/

bits& 
bits::operator+=(const bits& f) 
{
	// allocate extra memory if needed
	if (sz + f.sz > max)
	{
		int	m;

		// if twice the current size is big enough, use that.
		// Otherwise, use sz + f.sz
		(sz + f.sz) > max * 2 ? m = (sz + f.sz) : m = max * 2;

		// allocate space and copy existing bits
		unsigned int* buf = new unsigned int[m + 1];
		buf[m] = 0;
		memcpy(buf, b, sz * sizeof(unsigned int));
		unsigned int* ptr = b;
		max = m;
		b = buf;
		delete [] ptr;
	}

	// copy the contents of the parameter bitmap
	memcpy(b + sz, f.b, f.sz * sizeof(unsigned int));

	sz += f.sz;
	return *this;
}






