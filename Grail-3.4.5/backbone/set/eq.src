//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	June 1995

/***************************************************************************

  File:  classes/set/eq.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int set<Item>::operator==(const set<Item>& s) const

    This function is a public member of the template class set
    (declared in set.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/30         Added header and comments


 ***************************************************************************/




/***************************************************************************

            int set<Item>::operator==(const set<Item>& s) const

  Description:
    This function is a public member of the template class set 
    (declared in set.h).  This function tests the parameter set and this
    set for equality.  Two sets are judged to be equal if they contain
    the exactly the same elements (which implies that they must be the
    same size).  The sets are sorted to speed up the comparison.  After
    the sets will revert to their previous orders.  The function returns
    1 if the sets are equal, 0 otherwise.

    This function can be called in the following ways:
      value = this_set.operator==(other_set);
      value = (this_set == new_set);

  Parameters:
    const set<Item>& s - the set to compared with this set

  Return Value:
    int - returns 1 if the sets are equal, 0 otherwise.
  
 ***************************************************************************/

template <class Item>
int
set<Item>::operator==(const set<Item>& s) const
{
	// first check sizes
	if (s.sz != sz)
		return 0;

	// sort to make comparison faster
	if (sorted == 0)
		sort();
	if (s.sorted == 0)
		s.sort();
	//std::cout<<"comp"<<std::endl;
	// test from the end
	for (int i=sz-1; i>=0; --i)
		if (s.p[i] != p[i])
			return 0;

	//std::cout<<"eq"<<std::endl;

	return 1;
}

