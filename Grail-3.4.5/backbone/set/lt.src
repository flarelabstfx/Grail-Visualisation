//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	October 1993

/***************************************************************************

  File:  classes/set/lt.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int set<Item>::operator<(const set<Item>& s) const

    This function is a public member of the template class set
    (declared in set.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/30         Added header and comments


 ***************************************************************************/




/***************************************************************************

            int set<Item>::operator<(const set<Item>& s) const

  Description:
    This function is a public member of the template class set 
    (declared in set.h).  This is the less than operation for sets.  A set
    is less than another set if it contains less elements or if when sorted,
    it contains an element which is less than the corresponding element in 
    the other set.  This function returns 1 if this set is less than the
    parameter set and 0 otherwise.  The sets are sorted to speed up
    comparison within this function but revert to their previous order
    after the execution of this function.

    This function can be called in the following ways:
      value = this_set.operator<(test_set);
      value = (this_set < test_set);

  Parameters:
    const set<Item>& s - the set to be compared with this set

  Return Value:
    int - returns 1 if this set is less than the parameter set, 0 otherwise.
  
 ***************************************************************************/

template <class Item>
int
set<Item>::operator<(const set<Item>& s) const
{
	// if this set is smaller, return 1
	if (sz < s.sz)
		return 1;

	// if the parameter set is smaller, return 0
	if (sz > s.sz)
		return 0;

	// sort to make comparison faster
	sort();
	s.sort();

	// compare element by element
	for (int i=0; i<sz; ++i)
	{
		if (p[i] < s.p[i])
			return 1;

		if (p[i] > s.p[i])
			return 0;
	}
	return 0;
}





