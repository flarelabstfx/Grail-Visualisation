//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	August 1994

/***************************************************************************

  File:  classes/array/minuseq.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      array<Item>& array<Item>::operator-=(const array<Item>& s)
      array<Item>& array<Item>::operator-=(const Item& q)

    These functions are public members of the template class array
    (declared in array.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/26         Added header and comments and fixed
                                    problem in first function (it was
                                    keeping rather than deleting elements in
                                    parameter array)

 ***************************************************************************/




/***************************************************************************

         array<Item>& array<Item>::operator-=(const array<Item>& s)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function implements the array
    difference operation.  Any elements which are found in the parameter
    array and this array are removed from this array.  After the operation,
    the content of the arrays will be disjoint collections of items.  If
    there are elements in the parameter array which are not in this array,
    they are ignored.  After completion, the contents of the parameter array
    are unchanged and a reference to this array is returned.

    This function can be called in the following ways:
      this_array.operator+=(diff_array);
      this_array += diff_array;

  Parameters:
    const array<Item>& s - the array whose elements should be deleted from
                           this array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::operator-=(const array<Item>& s)
{
	int	i;
	int	j;

	// avoid self deletion
	if (this == &s)
		return *this;

	// if the size is small, just do simple delete
	if ((sz < 8) || (s.sz < 3))
	{
		for (i=0; i<s.sz; ++i)
			*this -= s[i];

		return *this;
	}

	// otherwise, do all the moves in one go
	array<int>	k;

        // flag location in first array for elements which are not in s
	for (i=0; i<sz; ++i)
	{
		for (j=0; j<s.sz; ++j)
			if (p[i] == s.p[j])
				break;
		if (j == s.sz)
			k[i] = 1;          // MH 98/05/26  changed 0 to 1
		else
			k[i] = 0;          // MH 98/05/26  changed 1 to 0
	}

        // remove all elements which are not flagged
	for (i=j=0; i<sz; ++i)
		if (k[i] == 1)
		{
			if (j != i)
				p[j] = p[i];
			++j;
		}

	sz = j;

	return *this;
}



/***************************************************************************

         array<Item>& array<Item>::operator-=(const Item& q)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function removes the parameter
    item from this array.  If the item is not found in the array, no
    change is made.  Otherwise, the item is removed and the size of
    the array is decremented.  The parameter item is unchanged and a
    reference to this array is returned by the function.

    This function can be called in the following ways:
      this_array.operator+=(diff_item);
      this_array += diff_item;

  Parameters:
    const Item& q - the item to be removed from the array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::operator-=(const Item& q)
{
	int	i;

	// is it present?
	if ((i = member(q)) < 0)
		return *this;

	--sz;
	for ( ; i<sz; ++i)
		p[i] = p[i+1];

	return *this;
}
