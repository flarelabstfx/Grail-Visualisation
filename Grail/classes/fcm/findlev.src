//#This comes from Grail-3.3.5
//#include <iostream>
void myPause(const char* s){
	std::cout << "Pause: " << s << "  ";
	char c;
	std::cin >> c;
}

template<class Label>
class fm;

template<class Label>
array<int>
fcm<Label>::find_levels()
// This function uses a breadth first traversal of the fcm to find
// the level of each state.  This information is returned as an
// array of integers.
// A level of -1 indicates that the state is unreachable.
{
//	myPause("starting find_levels");

   array<int> level;

	attach();


	if (maxlen == -1)
		maxlen = find_max();

if(debug>8){	std::cout << "maxlen = " << maxlen << std::endl;}

   int n = all_states.size();
   int i, j, k;

	// Initialize the level array.
   for (i = 0; i < n; i++)
      level += -1;

	int level_count = 1;

if(debug>8){std::cout << "level.size() = " << level.size() << std::endl;
	std::cout << "first start state = " << fm<Label>::start_states[0].value() << std::endl;}
//	myPause("About to set level of first start state");
	level[fm<Label>::start_states[0].value()] = 0;
//	myPause("Set level of first start state successfully");

	array<int> current, next;

	// We are assuming there is one start state, since there are no
	// functions dealing with non-deterministic cover automata.
	current += fm<Label>::start_states[0].value();

	while (current.size() > 0)
	{
		for (i = 0; i < current.size(); i++)
			for (j = 0; j < (*all_states[current[i]]).size(); j++)
			{
				k = (*all_states[current[i]])[j].get_sink().value();
				if (level[k] == -1)
				{
					next += k;
					level[k] = level_count;
				}
			}

		current = next;
		next.clear();
		level_count++;

		if (level_count > maxlen)
			current.clear();
	}

   return level;
}


template<class Label>
array<int>
fcm<Label>::find_ilevels()
// This function uses a breadth first traversal of the fcm to find
// the inverse level of each state.  This information is returned as an
// array of integers.
// An ilevel of -1 indicates that there is no path from that state
// to a final state.
{
	int i, j, k;

	attach();
	array<atstate<Label> * > inv = attach_inv();
	array<int> ilevel;

	array<int> current, next;

	for (i = 0; i < all_states.size(); i++)
	{
		if ((*all_states[i]).final())
		{
			current += i;
			ilevel += 0;
		}
		else
		{
			ilevel += -1;
		}
	}

	int ilevel_count = 1;
	while (current.size() > 0)
	{
		for (i = 0; i < current.size(); i++)
			for (j = 0; j < (*inv[current[i]]).size(); j++)
			{
				k = (*inv[current[i]])[j].get_sink().value();
				if (ilevel[k] == -1)
				{
					next += k;
					ilevel[k] = ilevel_count;
				}
			}

		current = next;
		next.clear();
		ilevel_count++;
	}

                //by ray  leak fix one 2011 summer
         for(int a=0;a<inv.size();a++)
                         { delete inv[a];
                                inv[a]=NULL;}
        inv.clear();




	return ilevel;
}
