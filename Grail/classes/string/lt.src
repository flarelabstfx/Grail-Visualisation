//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	August 1994


/***************************************************************************

  File:  classes/string/lt.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int string<Item>::operator<(const string<Item>& s) const

    This function is a public member of the template class string 
    (declared in string.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/02         Added header and comments
	 Jason Smith  7/24/2005				Changed comparison to lexicographical


 ***************************************************************************/




/***************************************************************************

        int string<Item>::operator<(const string<Item>& s) const

  Description:
    This function is a public member of the template class string 
    (declared in string.h).  This is the less than operator for strings.
	 The comparison is done by lexicographical ordering, meaning each item
	 is compared individually until either one item is greater than the other
	 or one of the strings has less items.	 The ordering is determined by 
	 the definition of operator< for items.  This function returns 1 if this 
	 string is less than the parameter string and 0 otherwise.

    This function can be called in the following ways:
      result = this_string.operator<(test_string);
      result = (this_string < test_string);

  Parameters:
    const string<Item>& s - the string to be compared with this string. 

  Return Value:
    int - 1 if this string is less than the parameter string, 0 otherwise.
  
 ***************************************************************************/

template <class Item>
int
string<Item>::operator<(const string<Item>& s) const
{
	int i; //by SH 05/20/2005

	int min = (sz < s.sz ? sz : s.sz);
	// min contains the smaller of the two sizes
	
	// Compare items individually
	for (i = 0; i < min; ++i)
	{
		if (p[i] < s.p[i])
			return 1;
		else if (p[i] > s.p[i])
			return 0;
	}
	// If the function has not returned by the end of this loop,
	// all of the elements of the two strings are equal.
	// Therefore, this string must be shorter than the parameter
	// string if less than is true.
	if (sz < s.sz)
		return 1;
	
	return 0;
}
