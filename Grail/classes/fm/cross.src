//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	April 1993

/***************************************************************************

  File:  classes/fm/cross.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::cross_product(const fm<Label>& a, const fm<Label> b)

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/09         Added header and comments

 ***************************************************************************/




/***************************************************************************

   void fm<Label>::cross_product(const fm<Label>& a, const fm<Label> b)

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function computes the cross product of a and
    b and stores the result as this fm.  This fm will contain arcs which
    represent all possible pairings of arcs in a and b which have the same
    input symbol.  a and b are unchanged.

    This function can be called in the following way:
      this_fm.cross_product(first_fm, second_fm);

  Parameters:
    const fm<Label>& a - the first fm with which to compute cross product
    const fm<Label>& b - the second fm with which to compute cross product

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::cross_product(const fm<Label>& a, const fm<Label> b)
{
	int			i;
	int			j;
	int			k;
	fm<Label>		temp1;
	fm<Label>		temp2;
	state			s1;
	state			s2;
	inst<Label>		t;
	fm<Label>		result;
	set<Label>		alphabet1;
	set<Label>		alphabet2;
	set<Label>		alpha;

	// clear result and this fm
	result.clear();

	clear();

	// find max state of a
	int max = a.max_state().value() + 1;
	
	// determine the intersection of the alphabets
	a.labels(alphabet1);
	b.labels(alphabet2);
	alpha.intersect(alphabet1, alphabet2);

	// for each label, determine the cross product
	for (i=0; i<alpha.size(); ++i)
	{
		// find instructions using this label
		a.select(alpha[i], temp1);
		b.select(alpha[i], temp2);

		// compute cross product
		for (j=0; j<temp1.size(); ++j)
		{
			int v1 = temp1[j].get_source().value();
			int v2 = temp1[j].get_sink().value();
			for (k=0; k<temp2.size(); ++k)
			{
				s1 = v1 + temp2[k].get_source().value() * max;
				s2 = v2 + temp2[k].get_sink().value() * max;
				t.assign(s1, alpha[i], s2);
	
				result.arcs.disjoint_union(t);
			}
		}
		temp1.clear();
		temp2.clear();


	}

	// start and final states
	for (i=0; i<a.start_states.size(); ++i)
	{
		int v1 = a.start_states[i].value(); 
		for (j=0; j<b.start_states.size(); ++j)
		{
			s1 = v1 + b.start_states[j].value() * max;	
			result.start_states += s1;
		} 
	}

	for (i=0; i<a.final_states.size(); ++i)
	{
		int v1 = a.final_states[i].value(); 
		for (j=0; j<b.final_states.size(); ++j)
		{
			s2 = v1 + b.final_states[j].value() * max;
			result.final_states += s2;
		} 
	}

	*this = result;
}
