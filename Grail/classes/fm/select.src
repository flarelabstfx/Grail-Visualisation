//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project
//	No commercial use permitted without written consent. 
//	December 1995


/***************************************************************************

  File:  classes/fm/select.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      fm<Label>& fm<Label>::select(const state& r,int opt,fm<Label>& s) const
      fm<Label>& fm<Label>::select(const Label& r, fm<Label>& s) const
      fm<Label>& fm<Label>::select(const Label& r, const state& x, 
                                   int opt, fm<Label>& s) const
      int fm<Label>::find_first(const state& r) const

    The first three functions are public members of the template class fm;
    find_first is a protected member of fm (declared in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
\    M.Hoeberechts  98/09/07         Added header and comments

 ***************************************************************************/




/***************************************************************************

  fm<Label>& fm<Label>::select(const state& r, int opt, fm<Label>& s) const

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  This function creates a subfm, s,  by selecting arcs
    from this fm with state r as the source or sink state (depending on
    opt).  If opt has the value SOURCE, arcs with r as the source state will
    be chosen, if opt has the value EITHER, arcs with r as either
    the source or sink state will be chosen, and lastly if opt has the value
    SINK, arcs with r as the sink state will be chosen for s.  The
    declarations for SOURCE, SINK and EITHER appear in classes/fm/fm.h.  The
    function returns a reference to the fm which is created; this fm, opt 
    and r are unchanged.

    This function can be called in the following way:
      new_fm = this_fm.select(state1, option, new_fm);

  Parameters:
    const state& r - the state used to determine the selected arcs
    int opt - SOURCE, SINK or EITHER to specify selection criterion
    fm<Label>&s - holds the subfm which is generated

  Return Value:
    fm<Label>& - a reference to the subfm which is generated
  
 ***************************************************************************/

template <class Label>
fm<Label>&
fm<Label>::select(const state& r, int opt, fm<Label>& s) const
{
	int	i;

	s.clear();

	// if sorted and we only want source element, do binary search
	if (arcs.is_sorted() == 1 && opt == SOURCE)
	{
                if ((i = find_first(r)) == -1)
                        return s;

                for (; i<size(); ++i)
		{
                        if (!arcs[i].sourceis(r))
                                break;
			s.arcs.disjoint_union(arcs[i]);
		}

                return s;
	}

	// if not sorted, do it by linear pass
	if (opt == EITHER)
	{
		for (i=0; i<size(); ++i)
			if (arcs[i].sourceis(r) || arcs[i].sinkis(r))
				s.arcs.disjoint_union(arcs[i]);
	}

	if (opt == SINK)
	{
		for (i=0; i<size(); ++i)
			if (arcs[i].sinkis(r))
				s.arcs.disjoint_union(arcs[i]);
	}

	if (opt == SOURCE)
	{
		for (i=0; i<size(); ++i)
			if (arcs[i].sourceis(r))
				s.arcs.disjoint_union(arcs[i]);
	}
	return s;
}




/***************************************************************************

      fm<Label>& fm<Label>::select(const Label& r, fm<Label>& s) const

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  This function creates a subfm, s, by selecting arcs
    from this fm.  Any arcs with r as the label for the transition are
    copied from this fm into the new fm.  The function returns a reference
    to the new fm; this fm and r are unchanged.

    This function can be called in the following way:
      new_fm = this_fm.select(label1, new_fm);

  Parameters:
    const Label& r - the label used to select the arcs
    fm<Label>&s - holds the subfm which is generated

  Return Value:
    fm<Label>& - a reference to the subfm which is generated
  
 ***************************************************************************/

template <class Label>
fm<Label>&
fm<Label>::select(const Label& r, fm<Label>& s) const
{
	s.clear();
	for (int i=0; i<size(); ++i)
		if (arcs[i].labelis(r))
			s.arcs.disjoint_union(arcs[i]);

	return s;
}



/***************************************************************************

     fm<Label>& fm<Label>::select(const Label& r, const state& x, 
                                  int opt, fm<Label>& s) const

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  This function creates a subfm, s, by selecting arcs
    from this fm.  Each arc with r as the label for the transition and
    a source or sink state matching x (depending on opt), will be copied 
    from this fm into the new fm.  If opt has the value SOURCE, arcs with 
    x as the source state will be chosen, if opt has the value EITHER, arcs
    with x as either the source or sink state will be chosen, and lastly 
    if opt has the value SINK, arcs with x as the sink state will be chosen 
    for s.  The declarations for SOURCE, SINK and EITHER appear in 
    classes/fm/fm.h.  The function returns a reference to the new fm;
    this fm, opt, x and r are unchanged.

    This function can be called in the following way:
      new_fm = this_fm.select(label1, state1, option, new_fm);

  Parameters:
    const Label& r - the label used to select the arcs
    const state& x - the state used to determine the selected arcs
    int opt - SOURCE, SINK or EITHER to specify selection criterion
    fm<Label>&s - holds the subfm which is generated

  Return Value:
    fm<Label>& - a reference to the subfm which is generated
  
 ***************************************************************************/

template <class Label>
fm<Label>&
fm<Label>::select(const Label& r, const state& x, int opt, fm<Label>& s) const
{
	int	i;

	s.clear();

	// some selections can be done more easily
	if ((arcs.is_sorted() == 1) && (opt == SOURCE))
	{
		if ((i = find_first(x)) == -1)
			return s;

		for (; i<arcs.size(); ++i)
		{
			if (!arcs[i].sourceis(x))
				break;
			if (arcs[i].labelis(r))
				s.arcs.disjoint_union(arcs[i]);
		}

		return s;
	}


	for (i=0; i<size(); ++i)
	{
		if (!arcs[i].labelis(r))
			continue;

		if ((opt == SOURCE || opt == EITHER) && arcs[i].sourceis(x))
		{
			s.arcs.disjoint_union(arcs[i]);
			continue;
		}

		if ((opt == EITHER || opt == SINK) && arcs[i].sinkis(x))
			s.arcs.disjoint_union(arcs[i]);
	}

	return s;
}


/***************************************************************************

            int fm<Label>::find_first(const state& r) const

  Description:
    This function is a protected member of the template class fm (declared in
    classes/re/fm.h).  If the set of arcs is sorted, this function can be
    used to find the first occurrence of the given source state in the set
    of arcs for this fm.  A recursive binary search is performed to do the
    search.  Note that it is the programmer's responsibility to make sure
    that the arcs are sorted before this function is called since no 
    checking is done.  The function returns the index of the first arc
    containing the state r as its source, or -1 if no such arc is found.

    This function can be called in the following way:
      result = this_fm.find_first(state1);

  Parameters:
    const state& r - the source state to find

  Return Value:
    int - the index of the first arc containing the state r as its source,
          or -1 if no such arc is found
  
 ***************************************************************************/

template <class Label>
int
fm<Label>::find_first(const state& r) const
{
	int	left = 0;
	int	right = arcs.size();
	int	probe;
	state	s1;

	for (;;)
	{
		probe = (right + left)/2;
		s1 = arcs[probe].get_source();

		// back up to first occurrence
		if (s1 == r)
			for (;;)
			{
				if (probe == 0)
					return probe;

				s1 = arcs[--probe].get_source();

				if (s1 != r)
					return ++probe;
			}

		if (probe == left)
		{
			if (probe + 1 < arcs.size() && 
				arcs[probe+1].get_source() == r)
					return probe+1;
			break;
		}

		if (s1 < r)
			left = probe;
		else
			right = probe;
	}
	return -1;
}
