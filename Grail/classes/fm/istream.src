//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	May 1993


/***************************************************************************

  File:  classes/fm/istream.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      template <class Label> istream& operator>>(istream& is, fm<Label>& a)

    This function is a friend of the template class fm (declared in fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/10         Added header and comments

 ***************************************************************************/




/***************************************************************************

  template <class Label> istream& operator>>(istream& is, fm<Label>& a)

  Description:
    This function is a friend of the template class fm (declared in fm.h).
    This function allows an fm to be inputted from the stream is. The
    stream should be valid and open before calling this function.  The
    inputted fm will be stored in the parameter fm, a.

    The input is expected to be in the following format:
      - the finite machine will be represented as a list of instructions
        (transitions), one per line, followed by a carriage return.
      - pseudo-instructions should be used to indicate start states and
        final states e.g. '(START) |- 1' or '8 |- (FINAL)'
      - normal transitions should consist of a source state number, followed
        by a label, followed by a sink state number e.g. '1 b 2'
      - the order of the instructions does not matter

    An example of acceptable input is the following:
    (START) |- 2
    (START) |- 3
    2 a 3
    3 b 4
    4 -| (FINAL)
    4 b 4

    operator>> for instructions is used to perform the actual inputting
    (see classes/inst/istream.src)

    The function returns a reference to the input stream.

    This function can be called in the following ways:
      operator>> (input_stream, new_fm);
      input_stream >> new_fm;

  Parameters:
    istream& is - the input stream
    fm<Label>& a - stores the fm which is read from the stream

  Return Value:
    istream& - a reference to the input stream

 ***************************************************************************/

template <class Label>
std::istream&
operator>>(std::istream& is, fm<Label>& a)
{
	inst<Label>		t;
	list<inst<Label> >	l;
	char *temp = new char[4096];

	a.clear();

	while (is.peek() == '#')
		is.getline(temp, 4095);
	for (is >> t; !t.is_null(); is >> t)
	{
		if (t.is_start())
			a.start_states += t.get_sink();
		else
		if (t.is_final())
			a.final_states += t.get_source();
		else
			l += t;
		while (is.peek() == '#')
			is.getline(temp, 4095);
	}
//#if gccversion>3.4
//delete temp[];
//#else
     delete temp;
//#endif
	a.arcs.from_list(l);
	return is;
}
