//#This comes from Grail-3.3.5; modified by Ray and Sherry in summer 2010
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	May 1993


/***************************************************************************

  File:  classes/fm/catenate.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      fm<Label>& fm<Label>::operator^=(const fm<Label>& a)

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/06         Added header and comments
    C. Campeanu    12/09/23         debug information added + bug fix

 ***************************************************************************/




/***************************************************************************

           fm<Label>& fm<Label>::operator^=(const fm<Label>& a)

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function catenates this fm with the 
    parameter fm.  New instructions are added from final states in this 
    fm to the sinks of start states of the parameter machine.  The states in the
    parameter machine are renumbered and added to this fm.  The resulting
    language will contain the all the words in the language represented 
    by this fm catenated with the words in the language represented by 
    the parameter fm.  The function returns a reference to this fm.
    
    This function can be called in the following ways:
      this_fm.operator ^=(other_fm);
      this_fm ^= other_fm;
      
    // Fixed operator ^= comment (from =^)by CC 23 sept 2012/may 12, 2013 
    //  and explained the used algorithm
    // The concatenation is done by attaching new transitions 
    // to final states of the first automaton by duplicating all 
    // transitions from the start state of the second one.
    // Also, debug information added by CC and done a 
    // permanent fix for concatenation. 2013 Aug 19

  Parameters:
    const fm<Label>& a - the fm to be catenated to this fm

  Return Value:
    fm<Label>& - a reference to this fm

  
 ***************************************************************************/

template <class Label>
fm<Label>&
fm<Label>::operator^=(const fm<Label>& a)
{
	fm<Label>	c;
	fm<Label>	d;
	set<state>	sinks;
	set<Label>	labels;

	// find the maximum state value of invoking machine
	int max = max_state().value() + 1;

	// renumber states of argument machine a, the second automaton
	fm<Label> b = a;
	b.renumber(max);
        
        int StartStateIsReachable=0;
 


	// make instructions from all final states of the invoking
	// machine to targets of start states of the argument
	// machine
        // if start state of the second machine is unreachable it should be deleted
        // All other states are preserved
 
	for (int i=0; i<b.start_states.size(); ++i) //happens only once if only one start state
	{
	        if (debug==9)
	          {
	           std::cout <<"Processing state "<<b.start_states[i]<<"\n";
	          } 
		b.select(b.start_states[i], SOURCE, c);
		if (debug==9)
	          {
	           std::cout <<"Automaton c holding the transitions to be added:\n" <<c<<"\n"
                        <<"\n and current fm:\n"<<*this;;
	          } 

		for (int j=0; j<c.size(); ++j)
		{
			labels = c[j].get_label();
			sinks = c[j].get_sink();
			// don't forget self loops on start states
			if (c[j].get_sink() == b.start_states[i])
                            StartStateIsReachable=1; //added by CC
                // If start state of second fm is reachable, then it will be in 
                //the result fm; otherwise it becomes unreachable and it can be eliminated
                // 
		//		disjoint_union(c[j]);  it has been deleted 
		// since here is only applicable to one case.
                //  See later work around for this(if we keep it we may delete some transitions
                // generated by self-loops ).
                // c contains arcs to states reachable from start states of second fm
                //  they are added to first fm; they are deleted from second fm, in case
                // start state of second fm becomes unreachable.
                 
                  //At this point c contains all sinks and labels 
                  d.cartesian(final_states, labels, sinks);
		    arcs += d.arcs;
                if (debug==9)
	          {
	           std::cout <<"j="<<j
                        <<"\n Automaton c holding the transitions to be added\n" <<c<<"\n"
                        <<"\n and current fm:\n"<<*this;;
	          }
                 }
		
                  if (debug==9) 
                    {
                       std::cout<<"D:"<<d<<"\n current fm: \n"<<*this<<"\n"; 
                    } 
		// current object now includes links from final states of the first fm 
                // to states reachable from start state of the second fm
		// d is only used here as a temporary variable
	if (debug==9)
	  {
	   std::cout <<"Automaton c:\n"<<c<<"\n and d:"<<d<<
                  "\n and current fm:\n"<<*this;
	  }
	/*
         b -= c;  //deleted by SH 06/18/2007, change back by Ray & Sherry
         deleted again by CC, since by adding it 
         we loose transitions from the start states of the second
         FA   ; should be used only if start state of b is not reachable
        */  
        if (!StartStateIsReachable)b-=c;
	if (debug==9)
	  {
	   std::cout <<"Automaton b after b-=c:\n"<<b<<"\n ";
	  }              
	}
        if (debug==9)
	  {
           std::cout <<"Automaton b:\n"<<b<<"\n and current fm"<<*this;
          }
	arcs.disjoint_union(b.arcs);
        if (debug==9)
	  {
           std::cout <<"Disjoint Automaton b:\n"<<b<<"\n";
          }
	// if language of argument machine contains empty string,
	// keep final states of invoking machine

	sinks.intersect(a.start_states, a.final_states);
	if (sinks.size() > 0)
		final_states.disjoint_union(b.final_states);
	else
		final_states = b.final_states;
		
	return *this;
}
