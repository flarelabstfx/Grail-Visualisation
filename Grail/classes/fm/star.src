//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	August 1994


/***************************************************************************

  File:  classes/fm/star.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      fm<Label>& fm<Label>::star()

    This function is a public member of the template class fm 
    (declared in fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/09         Added header and comments
                                    - changed disjoint union for
                                    adding new instructions to
                                    add_instruction(...)

 ***************************************************************************/




/***************************************************************************

                       fm<Label>& fm<Label>::star()

  Description:
    This function is a public member of the template class fm 
    (declared in fm.h).  Perform the Kleene star ('*') operation on the fm
    (which is equivalent to performing the star operation on the language 
    represented by this fm).  The resulting language will contain all 
    catenations of words in the original language and the empty word. The
    transformation is achieved by first performing the plus operation and
    then merging all the start states into one state which is both a start
    and final state.  The resulting fm could be non-deterministic.  The
    function returns a reference to this fm.

    This function can be called in the following way:
      this_fm.star();

  Parameters:  none

  Return Value:
    fm<Label>& - a reference to this fm
  
 ***************************************************************************/

template <class Label>
fm<Label>&
fm<Label>::star()
{
	int		i;
	inst<Label>	t;
	fm<Label> 	temp;
	fm<Label>	temp2;

	// do plus
	plus();

	// clone the start states
	state clone = max_state().value() + 1;

	for (i=0; i<start_states.size(); ++i)
	{
		// select all transitions from the ith start state
		select(start_states[i], SOURCE, temp2);
		temp.disjoint_union(temp2);
	}

	for (i=0; i<temp.size(); ++i)
	{
		// add instructions from the clone to the sink states
		t.assign(clone, temp[i].get_label(), temp[i].get_sink());
		add_instruction(t);                    // MH 98/09/09
	}

	// none of the preceding start states are start anymore
	start_states.clear();

	// make the clone both final and start
	start_states += clone;
	final_states += clone;

	return *this;
}
