//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	May 1992


/***************************************************************************

  File:  classes/fm/plus.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::plus()

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/07         Added header and comments

 ***************************************************************************/




/***************************************************************************

                          void fm<Label>::plus()

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  Perform the plus ('+') operation on the fm (which is
    equivalent to performing the plus operation on the language represented
    by this fm).  The resulting language will contain all catenations of
    words in the original language.  The transformation is achieved by
    adding arcs from all states which have a transition to a final state
    to each start state on the same letter as the arc to the final state.

    This function can be called in the following way:
      this_fm.plus();

  Parameters:  none

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::plus()
{
	set<state>		sources;
	set<Label>		labels;
	fm<Label>		temp;
	fm<Label>		result;

	// duplicate all instructions to final states

	for (int i=0; i<final_states.size(); ++i)
	{
		int	j;

		// get a set of arcs to a selected final state

		select(final_states[i], SINK, temp);

		for (j=0; j<temp.size(); ++j)
		{
			// these arcs go to all start_states 

			sources = temp[j].get_source();
			labels = temp[j].get_label();
			result.cartesian(sources, labels, start_states);
			arcs += result.arcs;
		}
	}
}
