//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	February 1996



/***************************************************************************

  File:  classes/fm/reach2.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::reachable_states(set<state>& s) const

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/07         Added header and comments

 ***************************************************************************/




/***************************************************************************

           void fm<Label>::reachable_states(set<state>& s) const

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  This function extracts the set states reachable
    from a start state in this fm and returns them as the parameter set, s.
    This fm is unchanged.

    This function can be called in the following way:
      this_fm.reachable_states(state_set);

  Parameters:
    set<state>& s - after execution contains the set of reachable states

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::reachable_states(set<state>& s) const
{
	int	i;

	set<state> wave = start_states;
	s = wave;

	s.sort();
	arcs.sort();
	for (;;)
	{
		// find all targets reachable in one instruction

		set<state>	targets;
		set<state>	temp2;
		list<state>	temp3;
		fm<Label>	temp;

		temp3.clear();

		for (i=0; i<wave.size(); ++i)
		{
			select(wave[i], SOURCE, temp);
			temp.sinks(temp2);
			temp2.sort();
			temp3 += temp2;
		}

		targets.from_list(temp3);

		// if we've found new states, they will be used on
		// the next iteration

		wave.clear();
		for (i=0; i<targets.size(); ++i)
			if (s.member(targets[i]) < 0)
				wave.disjoint_union(targets[i]);

		if (wave.size() == 0)
			break;

		wave.sort();
		s.merge(wave);
	}
}
