//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1993


/***************************************************************************

  File:  classes/fm/member.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int fm<Label>::member_of_language(const string<Label>& wd, 
                                        const int verbose) const

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/07         Added header and comments

 ***************************************************************************/




/***************************************************************************

       int fm<Label>::member_of_language(const string<Label>& wd, 
                                         const int verbose) const

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function determines whether this fm accepts
    the parameter word (i.e. reaches a final state when the letters of the
    word are used as input).  If the parameter 'verbose' is true than the
    function prints out messages on the standard output stream to track 
    the transitions used in the finite state machine as the word is 
    inputted.  The function returns 1 if the word is accepted and 0 
    otherwise.  This fm and the parameters are unchanged during execution.

    This function can be called in the following way:
      result = this_fm.member_of_language(test_word, 0);

  Parameters:
    const string<Lable>& wd - the string to be tested
    const int verbose - true to activate verbose mode, false otherwise

  Return Value:
    int - 1 if the word is accepted, 0 otherwise.
  
 ***************************************************************************/

template <class Label>
int
fm<Label>::member_of_language(const string<Label>& wd, const int verbose) const
{
	int		j;
	set<state>	end;
	set<state>	temp2;
	fm<Label>	bunch;
	fm<Label>	temp;
	Label		r;

	// begin with start states
	set<state> current = start_states;

	// do for all characters

	for (int i=0; i<wd.size(); ++i)
	{
		r = wd[i];

		// get the target set

		bunch.clear();

		for (j=0; j<current.size(); ++j)
		{
			select(r, current[j], SOURCE, temp);
			bunch.arcs += temp.arcs;
		}

		// if there are no states, return

		if (bunch.size() == 0)
		{
			if (verbose)
			      std::cout << "no states acccessible on " << r << "\n";
			return 0;
		}

		// else, target set is the new start set

		bunch.sinks(current);

		if (verbose)
			std::cout << "on " << r << " take instructions\n" << bunch;
	}

	// exhausted the string; now test for a final state in the set

	bunch.sinks(temp2);

	// handle null string

	if (wd.size() == 0)
		temp2 = start_states;

	end.intersect(final_states, temp2);

	if (end.size() != 0)
	{
		if (verbose)
			std::cout << "terminate on final states " << end << "\n";
		return 1;
	}
	else
		return 0;
}
