//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1993


/***************************************************************************

  File:  classes/fm/cartesan.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::cartesian(const set<state>& a, const set<Label>& b, 
			const set<state>& c)

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/06         Added header and comments

 ***************************************************************************/




/***************************************************************************

    void fm<Label>::cartesian(const set<state>& a, const set<Label>& b, 
			const set<state>& c)

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function constructs arcs whose source state,
    label and sink states are determined by taking the cartesian product
    of the parameter sets.  Any existing arcs in this fm are removed, and
    all the arcs which are constructed are added to this fm.  The
    parameter sets are unchanged.

    This function can be called in the following way:
      this_fm.cartesian(state1, labels, state2);

  Parameters:
    const set<state>& a - set of source states
    const set<Label>& b - set of letters to appear on the arcs
    const set<state>& c - set of sink states

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::cartesian(const set<state>& a, const set<Label>& b, 
			const set<state>& c)
{
	inst<Label>	t;

	clear();

	for (int i=0; i<a.size(); ++i)
		for (int j=0; j<b.size(); ++j)
			for (int k=0; k<c.size(); ++k)
			{
				t.assign(a[i], b[j], c[k]);
				disjoint_union(t);
			}
}
