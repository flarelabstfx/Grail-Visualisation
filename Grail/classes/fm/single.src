//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	May 1993


/***************************************************************************

  File:  classes/fm/single.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      fm<Label>& fm<Label>::single(const Label& r)

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/09         Added header and comments

 ***************************************************************************/




/***************************************************************************

              fm<Label>& fm<Label>::single(const Label& r)

  Description:
    This function is a public member of the template class fm (declared in
    classes/re/fm.h).  This function replaces any existing instructions 
    (transitions), start states and final states in this fm and by one
    start state (0), one final state (1), and a transition from 0 to 1 on 
    input r.  The function returns a reference to this fm.

    This function can be called in the following way:
      this_fm.single(new_label);

  Parameters:
    const Label& r - the label for the single transition in the fm

  Return Value:
    fm<Label>& - a reference to this fm
  
 ***************************************************************************/

template <class Label> 
fm<Label>&
fm<Label>::single(const Label& r)
{
	inst<Label>	t;

	// clear any previous values
	clear();

	// make start state
	state m = 0;
	start_states += m;

	// make final inst
	state n = 1;
	final_states += n;

	// make single inst
	t.assign(m, r, n);
	arcs.disjoint_union(t);

	return *this;
}
