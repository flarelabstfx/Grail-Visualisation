//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/same_input_union.src
-----

Description:
------------
	This file contains the definition of the following function:

		afa<T> afa<T>::same_input_union(const afa<T>& a) const

	This function is a private member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

		afa<T> afa<T>::same_input_union(const afa<T>& a) const

Description:
	This function is a private member of the template class afa (declared in afa.h).
	This function is called by afaunion(const afa<T>& a) const , a public member of
	the afa template class.
	This function assumes that "this" afa and afa a have the same set of input symbols.
	If the cardinality of the union of "this" state set and afa a's state set exceeds 32,
	then the union of "this" afa and afa a cannot be constructed using our bit-vector
	representation; the behaviour/output of this function is unpredictable in this case.
	No error messages are provided by this function.

	This function can be called in the following way(s):
		newafa = afa1.same_input_union(afa2);

	Parameters:
		const afa<T>& a 	- the afa to union with this afa

	Return Value:
		afa<T>			- the afa accepting the union of
					  the languages accepted by "this" afa and afa a.

******************************************************************************************/

//#include <math.h>
//#include <cmath> //by SH 05/26/2005
//#include "afa.h"

template <class T>
afa<T> afa<T>::same_input_union(const afa<T>& a)const
{
  afa<T> newafa;
  newafa.symbol = symbol;               //set the input alphabet assume that
                                        //the alphabet of the two afas are same
  newafa.states = states + a.states;    //the states of the union afa is the
                                        //summation of states of the two afas
  newafa.final = final + (a.final<<states);  //shift a.final to the left of
                                             //the first final
  newafa.head = head;                        //copy the head function of the
                                             //first afa
  funct tmp = a.head;
  tmp.leftshift(states);                     //shift each bit vector in tmp
                                             //states bit to the left
 (newafa.head).append(tmp);        //the new head function is the logical OR
                                   //of the two function
  int ssize = symbol.size();
  int nstates = newafa.states;
  funct* newtable = new funct[nstates * ssize];

//copy the transition functions of this afa to the first states row
//of the constructed union afa table
  for (int k = 0; k<states; k++)
    for (int l = 0; l<ssize; l++)
      {
	newtable[k*ssize + l] = table[k*ssize + l];
      }

//left shift each transition function of a to states bits, and
//copy them to the last nstates - states row of the union afa table
  for (int i =states; i<nstates; i++)
    for (int j =0; j<ssize; j++)
      {
	funct tmp =(a.table)[(i-states)*ssize + j];
	tmp.leftshift(states);
	newtable[i*ssize + j] = tmp;
      }
  newafa.table = newtable;
  newtable = 0;

  return newafa;
}
