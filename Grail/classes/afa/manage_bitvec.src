//#This comes from 3.1.4-new
/******************************************************************************************
 File: 	classes/afa/manage_bitvec.src
 -----

 Description:
 ------------
	This file contains the definition of the following functions:

		unsigned * ord_count(int vector_width)
		unsigned * build_ordinv(int vector_width)

	These functions are called by the public member fmtoafa(.) of the afa template class
	(described in afa.h), and public member simplify2(. , .) of the funct class (defined in
	(classes/afa/dnf/function.h). The functions are use to improve the handling of bit-vectors.

 Revision History:
 -----------------
	S. Huerter			 Source code

******************************************************************************************/
#ifndef BIT_TABLES
#define BIT_TABLES
/******************************************************************************************

			unsigned * ord_count(int vector_width)

Description:
	This function builds an array "ord" of unsigned of size 2^vector_width.  It is
	assumed that 0 <= vector_width <= 32.   "ord" is just the set of bit-vectors
	B^vector_width (where B={0,1}), ordered on increasing bit-vector weight.

	This function can be called in the following way(s):
		unsigned    *my_array = ord_count(n)

	Parameters:
		int vector_width		- the dimension (number of variables) being
						  used in the bit-vectors;
						  0 <= vector_width <= 32

	Return Value:
		unsigned *			- address of ord array

******************************************************************************************/
unsigned * ord_count(int vector_width)
{
unsigned    MAX = (unsigned)pow((double)2,(double)vector_width)-1;
unsigned    curblock, lastshifts, lastadds, curadds, curshifts,
            curblock_strt, lastblock_strt,n;
unsigned    *ORD = new unsigned[MAX+1];

lastshifts=1;
ORD[0]=0;
curblock_strt=1;
lastblock_strt=0;
lastadds=0;
int i; //by SH 05/22/2005

for(curblock=1; curblock<=vector_width; curblock++)
  {
    curshifts = 0;
    curadds   = 0;
    //adds
    for(i = 0; i<lastshifts; i++)
      {
	ORD[curblock_strt + i] = ORD[lastblock_strt + lastadds + i] + 1;
	curadds++;
      }
    //shifts
    for(i=0; i<curadds; i++)
      {
	n = 2*ORD[curblock_strt + i];
	while(n <= MAX)
	  {
	    ORD[curblock_strt + curadds + curshifts] = n;
	    curshifts ++;
	    n = 2*n;
	  }
      }
    lastblock_strt = curblock_strt;
    curblock_strt  = lastblock_strt + curadds + curshifts;
    lastadds = curadds;
    lastshifts = curshifts;

  }
return ORD;
}
/******************************************************************************************

			unsigned * build_ordinv(int vector_width)

Description:
	This function builds an array "ord_inv" of unsigned of size 2^vector_width.  It is
	assumed that 0 <= vector_width <= 32.   "ord_inv" is just the inverse of the "ord"
	array built by the function above.  Let x be an element of B^vector_width (where B={0,1}).
	Then ord_inv[x]=the position of x in the ord array.  Thus, ord_inv provides a quick
	means for comparing the weights of bit-vectors.

	This function can be called in the following way(s):
		unsigned    *my_array = build_ordinv(n)

	Parameters:
		int vector_width		- the dimension (number of variables) being
						  used in the bit-vectors;
						  0 <= vector_width <= 32

	Return Value:
		unsigned *			- address of ord_inv array

******************************************************************************************/
unsigned * build_ordinv(int vector_width)
{

	//First, compute its size:
	unsigned size = (unsigned)pow((double)2,(double)vector_width);

	//Now build it:
	unsigned *ord = ord_count(vector_width);
        unsigned *ord_inv = new unsigned[size];
	for(unsigned i = 0; i<size; i++)
  		ord_inv[ord[i]] = i;

	return ord_inv;
}


#endif
