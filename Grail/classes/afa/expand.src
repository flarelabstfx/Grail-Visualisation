//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/expand.src
-----

Description:
------------
	This file contains the definition of the following function:

		afa<T> afa<T>::expand(const array<T>& a) const

	This function is a private member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

			afa<T> afa<T>::expand(const array<T>& a) const

Description:
	This function is a private member of the template class afa (declared in afa.h).
	This function returns an afa accepting the same language as this afa, and having
	the expanded set of input symbols given by the sorted array a (which must properly
	include this input-symbol set). The expanded afa will have one more state than this afa.
	If this afa has more than 31 states, then the expansion of this afa cannot
	be constructed using our bit-vector representation.  The behaviour/output of this
	function is unpredictable in this case.  No error messages are provided.
	This function is called by the public members afacat(.) and afaunion(.).

	This function can be called in the following way(s):
		afa2 = afa1.expand(alphabet);

	Parameters:
		const array<T>& a 	- sorted array of input symbols
					  (must properly contain this alphabet)

	Return Value:
		afa<T>			- the afa accepting the same language as this afa,
					  with alphabet a.

******************************************************************************************/

//#include <math.h>

//#include "afa.h"

template <class T>
afa<T> afa<T>::expand(const array<T>& a) const
{
  afa<T> newafa;
  newafa.symbol = a;                    //set the input alphabet to be a
  newafa.states = states+1;             //the states of the expended afa is the
                                        //number of states of this afa plus 1
  newafa.final = final;                 //the final of the new afa is the same as
					//the original afa. this means that the new
					//state is the last state, and
					//it is not a final state.
  term t((unsigned)pow((double)2,(double)states),0);    //t is term ~x_(states+1)
  newafa.head = head.and1(t);            //the new head function is head_AND_t //by SH 05/23/2005
					//we don't need to simlify it because
					//it is already in the simplified version
  int ssize = a.size();			//the size of array a.
  int oldsize = symbol.size();		//the size of the original alphabet
  int nstates = newafa.states;          //the number of states of the new afa
  funct* newtable = new funct[nstates * ssize];

  funct zero(term(0,1));		//term 0
  funct one(term(0,0));		        //term 1

  //construct the transition functions g(i,j) for i<states, j<ssize.
  //if symbol a[j] is already in symbol then just copy the corresponding
  //function. otherwise assign constant 0 to the transition
 	int k; //by SH 05/22/2005
  for (k = 0; k<states; k++)
    for (int l = 0; l<ssize; l++)
      {
	int index =symbol.member(a[l]);
	if (index>=0)
		newtable[k*ssize + l] = table[k*oldsize + index];
	else
		newtable[k*ssize + l] = zero;
      }

  //construct the transitions for the newly introduced state.
  //if a[i] is already in the original alphabet, g(states+1, a[i])
  //= x_(states+1), otherwise it is 1
  term temp((unsigned)pow((double)2,(double)states),(unsigned) pow((double)2,(double)states));
  funct x_n(temp);
  for (k=0; k<ssize; k++)
	{
		int index = symbol.member(a[k]);
		if (index>=0)
			{
				newtable[states*ssize + k] = x_n;
			}
		else
			newtable[states*ssize + k] = one;
	}
  newafa.table = newtable;
  newtable = 0;

  return newafa;
}
