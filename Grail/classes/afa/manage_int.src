//#This comes from 3.1.4-new
/******************************************************************************************
 File: 	classes/afa/manage_int.src
 -----

 Description:
 ------------
	This file contains the definition of the following functions:

			int find_min_log(int n)
			int compare_int (unsigned m, unsigned n)
			int find_max (int* p, int n)
			void sort_int_array (int* p, int n)
			

		These functions are called by members of the template class afa (declared in afa.h)
		and members of the funct class (declared in classes/afa/dnf/function.h).

 Revision History:
 -----------------
	X. Wu				 Initial version of source code
	S. Huerter			 Header and comments
	
******************************************************************************************/
//#include <math.h>
#include <cmath> //by SH 05/26/2005
/******************************************************************************************

				int find_min_log(int n)

Description:
	This function finds the minimal integer m s.t. n<=2**m.  This function assumes
	that n>=1.  
			
	This function can be called in the following way(s):
		my_integer = find_min_log(another_int);

	Parameters:
		int n			-an integer

	Return Values:
		int			-smallest int m  s.t. n<=2**m

******************************************************************************************/
int find_min_log(int n)
{
  int m = 0;
  for (m=0; n>(int)pow((double)2, (double)m); m++);
  return m;
}
/******************************************************************************************

			int compare_int (unsigned m, unsigned n)

Description:
	This function compares the number of 1's in the binary representations of 
	parameters m and n (called their "weight").  
			
	This function can be called in the following way(s):
		result = compare_int (m,n)

	Parameters:
		int n			-an integer
		int m			-an integer

	Return Values:
		1			-if m has a larger weight than n
		0			-otherwise 

******************************************************************************************/
int compare_int (unsigned m, unsigned n)
{
  int cm = 0, cn = 0;
  for (int i = 0; i<=31; i++)
    {
      if ((m & (unsigned)pow((double)2, (double)i))>0)     //at position i, it has an 1
	cm +=1;
      if ((n & (unsigned) pow((double)2, (double)i))>0)
	cn +=1;
    }
  return cm>cn;
}
/******************************************************************************************

				int find_max (int* p, int n)

Description:
	This function finds the index of the integer in the given integer array p which
	has the smallest number of 1's in its binary representation.  This function assumes
	that the size n of the array is at least 1.
			
	This function can be called in the following way(s):
		result = find_max(my_array, length)

	Parameters:
		int* p			-an array of int
		int n			-the length of array p

	Return Values:
		int			- the position in p of the element with 
					  smallest weight

******************************************************************************************/
int find_max (int* p, int n)
{
  int max =p[0];
  int pos = 0;
  for (int i = 0; i<n; i++)
    {
      if (compare_int(max, p[i]) == 0)      //p[i] has more 1's
	{
       	  max = p[i];
	  pos = i;
	}
    }
  return pos;
}
/******************************************************************************************

				void sort_int_array(int* p, int n)

Description:
	This function sorts int array p, where p has length n, in ascending order according to
	the number of 1's in the binary representations of the integers. A very inefficient
	bubble-sort algorithm is used. 
			
	This function can be called in the following way(s):
		sort_int_array(my_array, length);

	Parameters:
		int* p			-an array of int
		int n			-the length of array p

******************************************************************************************/
void sort_int_array (int* p, int n)
{
  int pos;
  if (n == 1)
    return;

  for (int i = n; i>1; i--)
    {
      pos = find_max(p, i);
      int tmp = p[pos];
      p[pos] = p[i-1];
      p[i-1] = tmp;
    }
}

