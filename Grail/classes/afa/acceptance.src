//#This comes from 3.1.4-new
/******************************************************************************************

 File:	classes/afa/acceptance.src
 -----

 Description:
 ------------
 This file contains the definition of the following function:

 int afa<T>::accept(string<T>& input) const

 This function is a public member of the template class afa
 (declared in afa.h).

 Revision History:
 -----------------
 X. Wu			Initial version of source code
 S. Huerter 08/12/98	Header and comments

 ******************************************************************************************/
/******************************************************************************************

 int afa<T>::accept(string<T>& input) const

 Description:
 This function is a public member of the template class afa (declared in afa.h).
 This function determines whether the input string is accepted by "this" afa.

 This function can be called in the following way(s):
 result = afa.accept(input);

 Parameters:
 string<T>& input 		- the input string to be tested for acceptance

 Return Value:
 int				- if all symbols in input string are contained in
 this alphabet, then 1 is returned if the input
 is accepted by this afa, and 0 is returned if
 not;
 OR,	error msg.			- if the input string contains a symbol not in this
 alphabet.

 ******************************************************************************************/


template<class T>
  int
  afa<T>::accept(string<T>& input) const
  {
    int index;
    T element;
    int size;
    size = input.size();
    int leng = symbol.size();

    int vector = final; //initiate vector be the charateristic vector of finals

//if size is 0, just need to varify that all the input symbols in the input
//string is in the alphabet, and evaluate head function on the final
    if (size == 0)
      {
        for (int k = 0; k < size; k++)
          {
            if (symbol.member(input[k]) < 0)
              {
                std::cerr << "the input symbol is not legal" << std::endl;
                exit(1);
              }
          }
        return head.evaluate(vector);
      }

//calculate the transitions to get the vector for the head function to evaluate
    for (int i = 0; i < size; i++)
      {
        int temp = 0;
        element = input[i];
        if ((index = symbol.member(element)) < 0)
          {
            std::cerr << "the input symbol is not legal" << std::endl;
            exit(1);
          }
        for (int j = 0; j < states; j++)
          {
            if (table[j * leng + index].evaluate(vector) == 1)
              temp += (int) pow((double) 2, (double) j);
          }
        vector = temp;
      }

//evaluate the head function
    return head.evaluate(vector);
  }
