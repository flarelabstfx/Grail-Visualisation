//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/afaintersection.src
-----

Description:
------------
	This file contains the definition of the following function:

		afa<T> afa<T>::intersection(const afa<T>& a) const

	This function is a public member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

			afa<T> afa<T>::intersection(const afa<T>& a) const

Description:
	This function is a public member of the template class afa
	(declared in afa.h).  This function builds an afa which accepts the intersection of
	the languages accepted by "this" afa and afa a.
	If the cardinality of the union of "this" state set and afa a's state set exceeds 32,
	then the intersection of "this" afa and afa a cannot be constructed using our bit-vector
 	representation.  The behaviour/output of this function is unpredictable in this case.
	No error messages are provided by this function.

	This function can be called in the following way(s):
		interafa = afa1.intersection(afa2);

	Parameters:
		const afa<T>& a 	- the afa to intersect with this afa

	Return Value:
		afa<T>			- the afa accepting the intersection of
					  the languages accepted by "this" afa and afa a.

******************************************************************************************/

//#include <math.h>

//#include "afa.h"

template <class T>
afa<T> afa<T>::intersection(const afa<T>& a)const
{
  afa<T> newafa;
  array<T> ar;
  ar = a.get_symbol();
  int asize = ar.size();

  for (int x = 0 ; x<asize; x++)  //the symbol set of the intersection of
    {                                 //the two afa is the intersection of
	if (symbol.member(ar[x])>=0)  //the two symbol sets of the two afa
	   newafa.symbol += ar[x];
    }
  newafa.symbol.sort();               //sort the array of symbols

  newafa.states = states + a.states;    //the states of the union afa is the
                                        //summation of states of the two afas
  newafa.final = final + (a.final<<states); //shift a.final to the left of k
                                            //bit and add it to the first final
  funct newhead = head;                     //copy the head function of the
                                            //first afa
  funct tmp = a.head;
  tmp.leftshift(states);                    //shift each bit vector in tmp
                                            //states bit to the left
  newafa.head = newhead.and1(tmp);           //the new head function is the
                                            //logical AND of the two function
  int ssize = newafa.symbol.size();
  int nstates = newafa.states;
  int thissize = symbol.size();

  funct* newtable = new funct[nstates * ssize];

//copy the table of this afa to the first states row of the newtable
  for (int k = 0; k<states; k++)
    for (int l = 0; l<ssize; l++)
      {
	int index = symbol.member((newafa.symbol)[l]);
	newtable[k*ssize + l] = table[k*thissize + index];
      }

//shift each transition of the table of a to states bit to the left, and
//then copy them to the last nstates-states row of newtable
  for (int i = states; i < nstates; i++)
    for (int j = 0; j < ssize; j++)
      {
	int index = (a.symbol).member((newafa.symbol)[j]);
	funct tmp =(a.table)[(i-states)*asize + index];
	tmp.leftshift(states);
	newtable[i*ssize + j] = tmp;
      }
  newafa.table = newtable;     //set pointer newafa.table to newtable
  newtable = 0;                //set newtable pointer to 0 to avoid destruction

  return newafa;
}
