//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/afacat.src
-----

Description:	
------------
	This file contains the definition of the following function:
	
		afa<T> afa<T>::afacat(const afa<T>& a) const

	This function is a public member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

			afa<T> afa<T>::afacat(const afa<T>& a) const

Description:
	This function is a public member of the template class afa (declared in afa.h).
	This function builds an afa which accepts the concatenation of the language 
	accepted by "this" afa and the language accepted by afa a.
	If the input symbol sets of "this" afa and afa a are not the same, this function calls
	expand(const array<T>& )const (a private member of afa class) on each afa to make the 
	sets equal.  The behaviour/output of the expand function is unpredictable if the afa
	being expanded has a state set which exceeds 31.  Therefore, if either of this state set
	or afa a's state set exceeds 31, the behaviour/output of this function is unpredictable. 
	
	This function can be called in the following way(s):
		catafa = afa1.afacat(afa2);
		
	Parameters:
		const afa<T>& a 	- the afa to catenate with this afa

	Return Value:
		afa<T>			- the afa accepting the concatenation of 
					  the languages accepted by "this" afa and afa a;
	OR,
		error msg.		- if 	this.number_of_states()
						+
						(the number of bit-vectors reachable from
						 a.final under the transition function of a)

					  exceeds 32, then the catenation of "this" afa and afa a
					  cannot be constructed using our bit-vector representation;
					  an error message is returned by called function same_input_cat()
					  (a private member of afa class).
			
******************************************************************************************/

template <class T>
afa<T> afa<T>::afacat(const afa<T>& a) const
{
	afa<T>  cafa;
	
	if ((states !=0)&&(a.states !=0)&&(symbol==a.symbol))
	   cafa = same_input_cat(a);
	else if(symbol != a.symbol)
	   {
		array<T> temp;
                temp = symbol;
                temp +=a.symbol;
                temp.unique();
                temp.sort();
 
                afa<T> afa1=*this;
                afa<T> afa2=a;
                if (temp != symbol)
                   {
                      afa1 = expand(temp);
                    }
                if (temp != a.symbol)
                   {
                      afa2 = a.expand(temp);
                   }
		
		if ((afa1.states != 0)&&(afa2.states != 0))
		   cafa = afa1.same_input_cat(afa2);
	        else if (afa1.states == 0)
		   {
		      if (afa1.head.evaluate(0) == 0)  //afa1.head function is 0
		         {
			     cafa = afa1;              //accepts no string
			 }
		       else                            //afa1.head function is 1
 			 {
			     if (afa2.states != 0)
				{
			     	   afa<T> nafa;
			    	   nafa.states = 1;
			     	   nafa.final = 0;
			     	   nafa.head.append(term(0,0));
			     	   int column = temp.size();
			    	   nafa.table = new funct[column];
			     	   for (int i=0; i<column; i++)
				      {
					  nafa.table[i].set_head(0);
				      	  nafa.table[i].append(term(0,0));
				      }
			           cafa =nafa.same_input_cat(afa2);
				}
			      else if(afa2.head.evaluate(0) == 0)  //afa2.states =0
								   //afa2.head = 0
				 cafa = afa2;         //accepts no string
			      else                    //afa2.states = 0, afa2.head = 1
				 {
				   cafa = afa1;       //accepts all the strings
				 }
			 }
		   }
	      else               //afa1.states != 0 and afa2.states =0 
 		 {
		    if (afa2.head.evaluate(0) == 0)  //afa2.head function is 0
		       {
		          cafa = afa2;              //accepts no string
		       }
		    else                            //afa2.head function is 1
		       {
		     	   afa<T> nafa;
		    	   nafa.states = 1;
		     	   nafa.final = 0;
		     	   nafa.head.append(term(0,0));
		     	   int column = temp.size();
		    	   nafa.table = new funct[column];
		     	   for (int i=0; i<column; i++)
			      {
				  nafa.table[i].set_head(0);
			      	  nafa.table[i].append(term(0,0));
			      }
		           cafa =afa1.same_input_cat(nafa);
			}

	        }
	     
	   }

        return cafa;
}

