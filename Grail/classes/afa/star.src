//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/star.src
-----

Description:
------------
	This file contains the definition of the following function:

		afa<T> afa<T>::opstar() const

	This function is a public member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

				afa<T> afa<T>::opstar() const

Description:
	This function is a public member of the template class afa (declared in afa.h).
	This function returns an afa accepting the star of the language accepted by "this" afa.

	This function can be called in the following way(s):
		safa = afa.opstar();

	Return Value:
		afa<T>			- the afa accepting the star of
					  the language accepted by "this" afa;
	OR,
		error msg.		- if the number of bit-vectors reachable
					  from the characteristic vector under
			 		  the transition function exceeds 32, the
					  star machine cannot be constructed using our
					  bit-vector representation; an error msg. is
					  returned.

******************************************************************************************/

template <class T>
afa<T> afa<T>::opstar() const
{
    int Isize= (int) pow((double)2, (double)states);
    int *I = new int[Isize];
    queue<int> q;
    int column = symbol.size();
    int count = 0;             //count how many bit-vector will be reached
			       //from the final under the transition

	int x; //by SH 05/22/2005

    for (x=0; x<Isize; x++)
	I[x] = 0;    //initiate the array
    q.push(final);   //initialte the queue to contain only final

    if (head.evaluate(final) == 1)
	{
	    I[final] = 1;
	    count++;
	}
    while (!q.empty())
	{
	    int tmp = q.pop();
	    int vect;

	    for (int y=0; y<column; y++)
		{
		   vect = transition(tmp, y);
		   if (I[vect] == 0)
		       {
			  I[vect] = 1;
			  count++;
			  q.push(vect);
		       }
		   if((I[final]==0) && (head.evaluate(vect)==1))
			{
			    I[final] = 1;
			    count++;
			}
		}
	}

    afa<T> safa;
    if( states == 0)  //if the number of states of this is 0,
		      //the star will only accept lambda string
	{
	   if (head.evaluate(0)==1)
	   	return *this;
	   else
		{
	   	   safa.states = 1;
	   	   safa.final = 0;
		   safa.head.append(term(1,0));
		   safa.table = new funct[symbol.size()];
		   for (int l=0; l<symbol.size(); l++)
			safa.table[l].append(term(0,1));
	   	   return safa;
		}
	}
//if the number of the states of the original afa is not 0
    safa.final = 0;
    safa.symbol = symbol;
    if (I[final] == 0)          //the original afa does not accept any string
	{                       //so the star only accepts lambda string
	   safa.states = 1;
	   safa.final = 0;
	   safa.head.append(term(1,0));
	   safa.table = new funct[symbol.size()];
	   for (int l=0; l<symbol.size(); l++)
		safa.table[l].append(term(0,1));
	   return safa;
	}

    if (count>32)              //the star afa will have too much states
	{
	   std::cerr<<"The machine is too big for star"<<std::endl;
	   exit(1);
	}

    int *P = new  int[count];
    int indic=0;
    for (x=0; x<Isize; x++)
	{
	   if (I[x] == 1)
		{
		  P[indic] = x;
		  I[x] = indic;
		  indic++;
		}
	}

    safa.states = (unsigned) count;

//the head function accepts those vectors which are empty or have
//a component that is 1 which  corresponds to a vector of B^Q s.t the
//original head function accept it

   {
	unsigned alpha = 0;
	unsigned beta = 0;
	int i; //by SH 05/22/2005

	for (i=0; i<safa.states; i++)
		alpha +=(unsigned) pow((double)2, (double)i);
	term t(alpha, beta);
	safa.head.append(t);
	for (i = 0; i<safa.states; i++)
	   {
		if (head.evaluate(P[i]) == 1)
		   {
			alpha = (unsigned) pow((double)2, (double)i);
			beta = alpha;
			term tmp(alpha, beta);
			safa.head.append(tmp);
		   }
       	   }
   }


//now construct the transition functions.

   int row = safa.states;
   safa.table = new funct[row*column];

//first, if t in B^Q which is not f (the characteristic vector
//of the original finals), g'(t, a, u) = 1 iff there exists
//s in B^Q, s.t. u_s =1 andg(a, s) = t for u not 0, and
//g'(t, a, 0)=1 iff g(a, f) = t.
//for f, g'(f, a, u) = 1, u is not 0 iff there exists
//s in B^Q, s.t. u_s =1 andg(a, s) = f, or there is a r in B^Q, s.t.
//u_r =1 and h(g(a, r)) =1. g'(f, a, 0) = 1 iff g(a, f) =f or h(g(a, f)) =1.

  int i; //by SH 05/22/2005
  for (i = 0; i<row; i++)
     for (int j = 0; j<column; j++)
	{
	   safa.table[i*column +j].append (term(0,1));  //initialize to constant 0
	   unsigned vector=0;
//           for (int index = 0; index<states; index++)
//              if (table[index*column +j].evaluate(i) ==1)
//                 vector += (unsigned) pow((double)2, (double)index);



	   vector = transition(P[i], j);
	   term tmp((unsigned) pow((double)2, (double)i), (unsigned) pow((double)2, (double)i));
	   safa.table[I[vector]*column +j].append(tmp);

	   unsigned alpha = 0;
	   if (P[i] == final)                              //take care of g'(a, u, 0)
		{
		   for (int i=0; i<safa.states; i++)
		      alpha +=(unsigned) pow((double)2, (double)i);
	           term t(alpha, 0);
		   safa.table[I[vector]*column + j].append(t);
		   if (head.evaluate(vector) == 1)
			safa.table[I[final]*column+j].append(t);
		}

	   if (head.evaluate(vector) == 1)
		safa.table[I[final] *column +j].append(tmp);

	}

  delete [] I;                //recycle space
  delete [] P;

  for (i = 0; i<row; i++)
     for ( int l = 0; l<column; l++)
	{
	   safa.table[i*column+l].simplify();   //get rid of redundant terms
	}

  return safa;
}
