//#This comes from 3.1.4-new
/******************************************************************************************

File:	classes/afa/same_input_nonzero_state_cat.src
-----

Description:
------------
	This file contains the definition of the following function:

		afa<T> afa<T>::same_input_cat(const afa<T>& a) const

	This function is a private member of the template class afa
	(declared in afa.h).

Revision History:
-----------------
	X. Wu			Initial version of source code
	S. Huerter 08/12/98	Header and comments

******************************************************************************************/
/******************************************************************************************

		afa<T> afa<T>::same_input_cat(const afa<T>& a) const

Description:
	This function is a private member of the template class afa (declared in afa.h).
	This function is called by afacat(const afa<T>& a) const , a public member of
	the afa template class. It returns an afa which accepts the concatenation of the
	language accepted by "this" afa and the language accepted by afa a.
	This function assumes that "this" afa and afa a have the same set of input symbols,
	and that neither afa has zero states. If these two conditions aren't satisfied then
	the behaviour/output of this function is unpredictable.

	This function can be called in the following way(s):
		cafa = afa1.same_input_cat(afa2);

	Parameters:
		const afa<T>& a 	- the afa to catenate with this afa

	Return Value:
		afa<T>			- the afa accepting the concatenation of
					  the languages accepted by "this" afa and afa a.
	OR,
		error msg.		- if 	this.number_of_states()
						+
						(the number of bit-vectors reachable from
						 a.final under the transition function of a)

					  exceeds 32, then the catenation of "this" afa and afa a
					  cannot be constructed using our bit-vector representation;
					  an error message is returned.

******************************************************************************************/

template <class T>
afa<T> afa<T>::same_input_cat(const afa<T>& a) const
{
	int Isize =(int)pow((double)2, (double)a.states);
	int *I=new int[Isize];
	queue<int> q;
	int column = symbol.size();
	int count = 1;

	int x; //by SH 05/22/2005
	for (x=0; x<Isize; x++)
	   {
		I[x] = 0;
	   }
	I[a.final] = 1;
	q.push(a.final);

	while ( !q.empty())
	   {
		int tmp=q.pop();
		int vect;

		for (int y=0; y<column; y++)
		   {
			vect = a.transition(tmp, y);
			if (I[vect] == 0)
			   {
				I[vect] = 1;
				count++;
				q.push(vect);
			   }
		   }
	   }

	int *P= new int[count];
	int indic = 0;
	for (x = 0; x<Isize; x++)
	   {
		if (I[x] == 1)
		   {
			P[indic] = x;
			I[x] = indic;
			indic++;
		   }
	   }

	afa<T>  cafa;

	cafa.states = states + count;

	if (cafa.states>32)
	   {
		std::cerr<<"The two machines are too big"<<std::endl;
	        exit(1);
	   }

	cafa.symbol = symbol;
        cafa.final =final;
	if (head.evaluate(final) == 1)
	    cafa.final +=(unsigned) pow((double)2, (double)(states+I[a.final]));

//Define the head function of the concatenation afa.
//h(u) = 1 iff exists an x in B^Q2 s.t. i=I[x], u_(states+i) =1 and h2(x) = 1

	{
		unsigned alpha=0;
		for (int i = 0; i<count; i++)
		   if (a.head.evaluate(P[i]) == 1)
			{
			   alpha += (unsigned) pow((double)2, (double)(states+i));
			   term t(alpha, alpha);
			   cafa.head.append(t);
			}
	}

//Define the transition functions as follows:
//g(a, u) restrict on Q1 is the same as g1(a, u') where u' is the
//restriction of u on Q1. for any i>=states, if P[i] is not f2,
//g(i, a, u) = 1 iff there is a j>=states s.t. u_j =1 and g2(a, P[j]) = P[i].
//Let P[t] = f2. g(t, a, u) =1 iff h1(g(a, u)|Q1) = 1, or there is a i>=states s.t.
//u_i = 1 and g2(a, P[i]) = f2.

	int row = cafa.states;
	cafa.table = new funct[row*column];
	int i; //by SH 05/22/2005

        //take care of the restriction part
	for (i = 0; i<states; i++)
	   for (int j = 0; j<column; j++)
		cafa.table[i*column+j] = table[i*column +j];

	//construct the rest transitions

	for (i = states; i< states +count; i++)
	   for (int l=0; l<column; l++)
		{
		   cafa.table[i*column + l].append(term(0, 1));
	           int vector=0;
		   vector = a.transition(P[i-states], l);

		   unsigned alpha = 0;
		   alpha += (unsigned) pow((double)2, (double)i);
		   cafa.table[(I[vector]+states)*column +l].append(term(alpha,alpha));
		}

	funct tmp;
	int *variable = new int[states];
	int index; //by SH 05/22/2005
	for (index = 0; index<states; index++)
	   variable[index] = index+1;

        for (index = 0; index<column; index++)
	    {
		funct *newt = new funct[states];
		for (int k = 0; k<states; k++)
		   newt[k] = table[k*column+index];
		tmp = head.substitute(variable, newt, states);
		cafa.table[(states+I[a.final])*column+index].append(tmp);
	    }

	for (i = states; i<states + count; i++)
	   for (int m=0; m<column; m++)
               cafa.table[i*column+m].simplify();

	delete [] I;
	delete [] P;

   	return cafa;
}
