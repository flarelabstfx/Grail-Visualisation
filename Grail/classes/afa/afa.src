//#This comes from 3.1.4-new
/******************************************************************************************
 File: 	classes/afa/afa.src
 -----

 Description:
 ------------
	This file contains the definition of the following functions:

		afa<T>::afa ()
		afa<T>::afa (const afa<T>& a)
		afa<T>::afa (const fm<T>& d)
		afa<T>::~afa()

	These functions are members of the template class afa (declared 
	in afa.h).  They are all public members (constructors and 
	destructors).

 Revision History:
 -----------------
	X. Wu				Initial version of source code
	S. Huerter 08/11/98		Header and comments

******************************************************************************************/
//#include "afa.h"
/******************************************************************************************

				afa<T>::afa()

Description:
	This function is a public member of the template class afa (declared in afa.h). 
	This is the default constructor for afa.  This function returns an afa which 
	accepts no input string.	

******************************************************************************************/

template <class T>
afa<T>::afa ()
{
  table = 0;
  states = 0;
  head.set_head(0);
  final = 0;
}

/******************************************************************************************

				afa<T>::afa(const afa<T>& a)

Description:
	This function is a public member of the template class afa (declared in afa.h).
	This function is the copy constructor for afa.  The new afa will be a copy of
	the parameter afa.  

Parameters:
	const afa<T>& a - the afa to be copied into the new afa.

******************************************************************************************/

template <class T>
afa<T>::afa (const afa<T>& a)
{
  symbol = a.symbol;
  states = a.states;
  final = a.final;
  head = a.head;                        //copy the head function

  int snumber = symbol.size();           
  table = new funct[states * snumber];  //allocate space for the function table

//copy the transtion functions
  for (int i=0; i<states; i++)
    for (int j=0; j<snumber; j++)
      table[i*(snumber) + j] = (a.table)[i*(snumber) + j];
}


/******************************************************************************************
		
				afa<T>::afa(const fm<T>& d)

Description:
	This function is a public member of the template class afa (declared in afa.h).
	This is a conversion constructor for afa.  This function constructs an afa which
	accepts the same language as the given finite state machine d.		

Parameters:
	const fm<T>& d - the deterministic finite machine on which the new afa is based.
			 Requirements on the input dfa: (i)the size of the dfa state set
                         must not exceed pow(2,31); (ii)the dfa states must be numbered contiguously
			 starting at 0 (ie. 0,1,2,..without skipping any integers)
	                 If any of these requirements are not met, result is invalid -- no error
			 messages are provided.

******************************************************************************************/

template <class T>
afa<T>::afa (const fm<T>& d)
{
  this->fmtoafa(d);
}

/******************************************************************************************

				afa<T>::~afa()	

Description:
	This function is a public member of the template class afa (declared in afa.h).
	This is the destructor for afa. All that is deleted is the transition table
	(largest part of the afa).
 
******************************************************************************************/

template <class T>
afa<T>::~afa()
{
  delete [] table;
}

/******************************************************************************************/




