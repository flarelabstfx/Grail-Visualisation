//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	August 1994


/***************************************************************************

  File:  classes/inst/lt.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int inst<Label>::operator<(const inst<Label>& t) const

    This function is a public member of the template class inst
    (declared in inst.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/03         Added header and comments


 ***************************************************************************/




/***************************************************************************

           int inst<Label>::operator<(const inst<Label>& t) const

  Description:
    This function is a public member of the template class inst 
    (declared in inst.h).  This is the less than operator for instructions.
    One instruction is less than another if the source state is less, the
    source state is equal but the label is less, or the source and label
    are equal but the sink is less.  The comparisons for sink and source
    are done using operator< for states; the comparison for label is
    done using operator< for Label.  The function returns 1 if this
    instruction is less than the parameter instruction and 0 otherwise.
    
    This function can be called in the following ways:
      result = this_inst.operator<(other_inst);
      result = (this_inst < other_inst);

  Parameters:
    const inst<Label>& t - the instruction to be compared with this instruction

  Return Value:
    int - returns 1 if this instruction is less than the parameter 
          instruction, 0 otherwise.

 ***************************************************************************/

template <class Label>
int
inst<Label>::operator<(const inst<Label>& t) const
{
	// compare source states
	if (source < t.source) 
		return 1;
	if (source > t.source)
		return 0;

	// if the source states are equal, compare labels
	if (label < t.label)
		return 1;
	if (label > t.label)
		return 0;

	// if the labels are equal, compare sink states
	if (sink < t.sink) 
		return 1;

	return 0;
}









