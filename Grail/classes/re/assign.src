//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	January 1994


/***************************************************************************

  File:  classes/re/assign.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      re<S>& re<S>::operator=(const subexp<S>& r) 
      re<S>& re<S>::operator=(const re<S>& r)
      symbol_exp<S>& symbol_exp<S>::operator=(const symbol_exp<S>& r)
      cat_exp<S>& cat_exp<S>::operator=(const cat_exp<S>& r)
      plus_exp<S>& plus_exp<S>::operator=(const plus_exp<S>& r)
      star_exp<S>& star_exp<S>::operator=(const star_exp<S>& r)

    These functions are public members of the template classes declared 
    in classes/re/re.h.

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/10         Added header and comments


 ***************************************************************************/




/***************************************************************************

              re<S>& re<S>::operator=(const subexp<S>& r) 

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This is an assignment operator for regular 
    expressions.  It assigns this expression to be the same as the parameter
    subexpression.  The function returns a reference to this re.

    This function can be called in the following ways:
      this_re.operator=(a_subexp);
      this_re = a_subexp;

  Parameters:
    const subexp<S>& r - the subexpression to assign to this expression

  Return Value:
    re<S>& - a reference to this re
  
 ***************************************************************************/

template <class S>
re<S>&
re<S>::operator=(const subexp<S>& r) 
{
	if (p == &r)
		return *this;

	if (r == 0)
	{
		delete p;
		p = 0;
		return *this;
	}

	delete p;
	p = r.clone();
	return *this; 
}



/***************************************************************************

                  re<S>& re<S>::operator=(const re<S>& r)

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This is the assignment operator for regular 
    expressions.  It assigns this expression to be the same as the parameter
    regular expression.  The function returns a reference to this re.

    This function can be called in the following ways:
      this_re.operator=(other_re);
      this_re = other_re;

  Parameters:
    const re<S>& r - the regular expression to assign to this re.

  Return Value:
    re<S>& - a reference to this re
  
 ***************************************************************************/

template <class S>
re<S>&
re<S>::operator=(const re<S>& r)
{
	if (p == r.p)
		return *this;

	if (r.p == 0)
	{
		delete p;
		p = 0;
		return *this;
	}

	delete p;
	p = r.clone();
	return *this; 
}



/***************************************************************************

      symbol_exp<S>& symbol_exp<S>::operator=(const symbol_exp<S>& r)

  Description:
    This function is a public member of the template class symbol_exp 
    (declared in classes/re/re.h).  This is the assignment operator 
    for symbol subexpressions.  It assigns this expression to be the same 
    as the parameter symbol expression.  The function returns a reference 
    to this symbol_exp.

    This function can be called in the following ways:
      this_symbol_exp.operator=(other_symbol_exp);
      this_symbol_exp = other_symbol_exp;

  Parameters:
    const symbol_exp<S>& r - the symbol expression to be assigned to this 
                             symbol_exp.

  Return Value:
    symbol_exp<S>& - a reference to this symbol_exp
  
 ***************************************************************************/

template <class S>
symbol_exp<S>&
symbol_exp<S>::operator=(const symbol_exp<S>& r)
{
	if (this == &r)
		return *this;

	content = r.content;
	return *this; 
}



/***************************************************************************

           cat_exp<S>& cat_exp<S>::operator=(const cat_exp<S>& r)

  Description:
    This function is a public member of the template class cat_exp 
    (declared in classes/re/re.h).  This is the assignment operator 
    for catenation subexpressions.  It assigns this expression to be the same 
    as the parameter catenation expression.  The function returns a reference 
    to this cat_exp.

    This function can be called in the following ways:
      this_cat_exp.operator=(other_cat_exp);
      this_cat_exp = other_cat_exp;

  Parameters:
    const cat_exp<S>& r - the symbol expression to be assigned to this 
                             cat_exp.

  Return Value:
    cat_exp<S>& - a reference to this cat_exp
  
 ***************************************************************************/

template <class S>
cat_exp<S>&
cat_exp<S>::operator=(const cat_exp<S>& r)
{
	if (this == &r)
		return *this;

	delete left;
	delete right;
	left = r.left->clone();
	right = r.right->clone();
	return *this; 
}



/***************************************************************************

       plus_exp<S>& plus_exp<S>::operator=(const plus_exp<S>& r)

  Description:
    This function is a public member of the template class plus_exp 
    (declared in classes/re/re.h).  This is the assignment operator 
    for union subexpressions.  It assigns this expression to be the same 
    as the parameter union expression.  The function returns a reference 
    to this plus_exp.

    This function can be called in the following ways:
      this_plus_exp.operator=(other_plus_exp);
      this_plus_exp = other_plus_exp;

  Parameters:
    const plus_exp<S>& r - the symbol expression to be assigned to this 
                             plus_exp.

  Return Value:
    plus_exp<S>& - a reference to this plus_exp
  
 ***************************************************************************/

template <class S>
plus_exp<S>&
plus_exp<S>::operator=(const plus_exp<S>& r)
{
	if (this == &r)
		return *this;

	delete left;
	delete right;
	left = r.left->clone();
	right = r.right->clone();
	return *this; 
}



/***************************************************************************

        star_exp<S>& star_exp<S>::operator=(const star_exp<S>& r)

  Description:
    This function is a public member of the template class star_exp 
    (declared in classes/re/re.h).  This is the assignment operator 
    for starred subexpressions.  It assigns this expression to be the same 
    as the parameter starred expression.  The function returns a reference 
    to this star_exp.

    This function can be called in the following ways:
      this_star_exp.operator=(other_star_exp);
      this_star_exp = other_star_exp;

  Parameters:
    const star_exp<S>& r - the symbol expression to be assigned to this 
                             star_exp.

  Return Value:
    star_exp<S>& - a reference to this star_exp
  
 ***************************************************************************/

template <class S>
star_exp<S>&
star_exp<S>::operator=(const star_exp<S>& r)
{
	if (this == &r)
		return *this;

	delete left;
	left = r.left->clone();
	return *this;
}
