//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995



/***************************************************************************

  File:  classes/re/memory.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      void* symbol_exp<S>::operator new(size_t)
      void symbol_exp<S>::operator delete(void* p)
      void* star_exp<S>::operator new(size_t)
      void star_exp<S>::operator delete(void* p)
      void* plus_exp<S>::operator new(size_t)
      void plus_exp<S>::operator delete(void* p)
      void* cat_exp<S>::operator new(size_t)
      void cat_exp<S>::operator delete(void* p)

    Space for the following static members is also allocated here (for the
    ATT compiler, global variables are declared with the same name as the
    static members):
      pool<cat_exp<S> > cat_exp<S>::cat_pool; 
      pool<plus_exp<S> > plus_exp<S>::plus_pool;
      pool<star_exp<S> > star_exp<S>::star_pool;
      pool<symbol_exp<S> > symbol_exp<S>::symbol_pool;

    The definitions in this file are necessary to use user-defined memory
    management for the symbol_exp, star_exp, plus_exp and cat_exp classes.
    Using a pool allows large numbers of small objects (in this case,
    subexpressions) to be efficiently managed.  Objects can be allocated in 
    the pool by using the get_member() method and returned to the pool by
    using the return_member() method.

    The space allocated for static members (or global variables) is the
    pool of available memory for each class.  It will grow as required to
    allow an arbitrary number of objects to be created.

    For each class, operator new(size_t) overloads the new operator by a call 
    to get_member() for the appropriate pool.  operator delete(void* p) 
    overloads the delete operator with a call to return_member() which returns
    the space to the appropriate pool.

    These functions is are public members of the template classes declared 
    in classes/re/re.h.

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/11         Added header and comments


 ***************************************************************************/


#ifdef	ATT
  pool<cat_exp<char> > cat_pool;
  pool<plus_exp<char> > plus_pool;
  pool<star_exp<char> > star_pool;
  pool<symbol_exp<char> > symbol_pool;
#endif

#ifndef	ATT
  template <class S>
  pool<cat_exp<S> > cat_exp<S>::cat_pool; 

  template <class S>
  pool<plus_exp<S> > plus_exp<S>::plus_pool;

  template <class S>
  pool<star_exp<S> > star_exp<S>::star_pool;

  template <class S>
  pool<symbol_exp<S> > symbol_exp<S>::symbol_pool;
#endif


template <class S>
void*
symbol_exp<S>::operator new(size_t)
{
	return symbol_pool.get_member();
}

template <class S>
void
symbol_exp<S>::operator delete(void* p)
{
	symbol_pool.return_member(p);
}

template <class S>
void*
star_exp<S>::operator new(size_t)
{
	return star_pool.get_member();
}

template <class S>
void
star_exp<S>::operator delete(void* p)
{
	star_pool.return_member(p);
}

template <class S>
void*
plus_exp<S>::operator new(size_t)
{
	return plus_pool.get_member();
}

template <class S>
void
plus_exp<S>::operator delete(void* p)
{
	plus_pool.return_member(p);
}

template <class S>
void*
cat_exp<S>::operator new(size_t)
{
	return cat_pool.get_member();
}

template <class S>
void
cat_exp<S>::operator delete(void* p)
{
	cat_pool.return_member(p);
}
