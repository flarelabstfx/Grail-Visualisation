//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995


/***************************************************************************

  File:  classes/re/fltore.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void re<Label>::fltore(fl<Label>& f)

    This function is a public member of the template class re (declared 
    in classes/re/re.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/08         Added header and comments


 ***************************************************************************/




/***************************************************************************

                   void re<Label>::fltore(fl<Label>& f)

  Description:
    This function is a public member of the template class re (declared 
    in classes/re/re.h).  This function converts the parameter fl (finite
    language) to a regular expression and stores the result as this re.
    Such a conversion is always possible; the resulting expression is just
    the union of all the words in the language (this expression is certainly
    not always minimal).  For example, consider a language which contains
    the following words {abc, bbb, bubble, qwerty}.  The corresponding
    regular expression is "abc+bbb+bubble+qwerty".  To convert each word,
    there is a loop which catenates each of the characters in the word onto
    the existing expression.

    This function can be called in the following way:
      this_re.fltore(language);

  Parameters:
    fl<Label>& f - the finite language to convert to this re.

  Return Value:  none

 ***************************************************************************/


template <class Label>
void
re<Label>::fltore(fl<Label>& f)
{
	set<string<Label> >	words;
	re<Label>		wrd;
	re<Label>		sym;
	
	// get a set of all the words in the finite language
	f.get_words(words);

	if (words.size() == 0)
	{
		this->make_empty_set();
		return;
	}

	clear();

	// add each of the words to the existing expression
	for (int i=0; i<words.size(); ++i)
	{
		if (words[i].size() == 0)
		{
			wrd.make_empty_string();
			*this += wrd;
			continue;
		}

		// convert the characters in the current word
		wrd.clear();
		for (int j=0; j<words[i].size(); ++j)
		{
			sym.make_symbol(words[i][j]);
			wrd ^= sym; 
		}
		*this += wrd;
	}
}
