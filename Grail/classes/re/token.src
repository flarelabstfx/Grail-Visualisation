//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	December 1995


/***************************************************************************

  File:  classes/re/token.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      token_type re<S>::token(istream& str)

    This function is a public member of the template class re (declared
    in classes/re/re.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/06/09         Added header and comments


 ***************************************************************************/




/***************************************************************************

                   token_type re<S>::token(istream& str)

  Description:
    This function is a public member of the template class re (declared
    in classes/re/re.h).  This function returns the the value of the next
    token on the input stream without actually reading the token from the
    stream.  It will advance past any whitespace on the beginning of the
    stream to arrive at a token.  If no valid token is found, an error
    message is printed to the standard error stream and error_t is returned.
    The stream must be valid and open before calling this function.  The
    token returned will be one of the following:

	Token (see re.h)	Meaning (see lexical.h)
	----------------       	-----------------------
	eos_t			end of stream
//	error_t			error
	error_t1		//by SH 05/22/2005
	eset_t			empty set
	estring_t		empty string
	symbol_t		symbol
	plus_t			plus symbol
	star_t			star symbol
	cat_t			catenation symbol
	lparen_t		left parenthesis
	rparen_t		right parenthesis

    This function can be called in the following way:
      next_token = this_re.token(input_stream);

  Parameters:
    istream& str - the input stream

  Return Value:
    token_type - the next token on the input stream.


 ***************************************************************************/

template <class S>
token_type
re<S>::token(std::istream& str)
{
	char	k;

	if (str.eof() || str.tellg() < 0)
		return eos_t;

	// skip white space
	while (((char) str.peek() == ' ') || ((char) str.peek() == '\t')
			|| ((char) str.peek() == '\n'))
		str >> k;

	// now return appropriate token
	if (str.eof() || str.tellg() <  0)
		return eos_t;

	if ((char) str.peek() == re<S>::re_plus)
		return plus_t;
	if ((char) str.peek() == re<S>::re_star)
		return star_t;
	if ((char) str.peek() == re<S>::re_cat)
		return cat_t;
	if ((char) str.peek() == re<S>::re_lparen)
		return lparen_t;
	if ((char) str.peek() == re<S>::re_rparen)
		return rparen_t;
	if ((char) str.peek() == re<S>::re_eset[0])
	{
		str >> k;
		if ((char) str.peek() != re<S>::re_eset[1])
		{
			std::cerr << "\"" << (char) str.peek() << "\" illegal at " << str.tellg() << "\n";
			return error_t1; //by SH 05/20/2005
		}
		return eset_t;
	}

	if ((char)str.peek() == re<S>::re_eset[1])
	{
		std::cerr<<"expect '{' in front of '}' "<<std::endl;
		exit(1);
	}

	if ((char) str.peek() == re<S>::re_estring[0])
	{
		str >> k;
		if ((char) str.peek() != re<S>::re_estring[1])
		{
			std::cerr << "\"" << (char) str.peek() << "\" illegal at " << str.tellg() << "\n";
			return error_t1; //by SH 05/20/2005
		}
		return estring_t;
	}

	return symbol_t;
}
