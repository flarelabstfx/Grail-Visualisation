//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	June 1995


/***************************************************************************

  File:  classes/set/pluseq.src
  -----

  Description:
  ------------
    This file contains the definition of the following functions:
      set<Item>& set<Item>::operator+=(const set<Item>& s)
      set<Item>& set<Item>::operator+=(const Item& q)

    These functions are public members of the template class set
    (declared in set.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/30         Added header and comments


 ***************************************************************************/




/***************************************************************************

            set<Item>& set<Item>::operator+=(const set<Item>& s)

  Description:
    This function is a public member of the template class set 
    (declared in set.h).  This is the array union operation.  After the
    execution of this function, this set will be the union of itself and
    the parameter set.  The elements in the parameter set are checked
    for uniqueness so the union works correctly for disjoint and 
    intersecting sets.  The function returns a reference to this set.

    This function can be called in the following ways:
      this_set.operator+=(other_set);
      this_set += other_set;

  Parameters:
    const set<Item>& s - the array to perform the union with this set on

  Return Value:
    set<Item>& - a reference to this set
  
 ***************************************************************************/

template <class Item>
set<Item>&
set<Item>::operator+=(const set<Item>& s)
{
	// don't do self addition
	if (this == &s) 
		return *this; 

	// add each element (uniqueness is checked by +=)
	for (int i=0; i<s.sz; ++i)
		*this += s[i];

	return *this;
}



/***************************************************************************

               set<Item>& set<Item>::operator+=(const Item& q)

  Description:
    This function is a public member of the template class set 
    (declared in set.h).  This function adds an element to a set.  The set
    is checked to make sure the element does not already exist so that the
    uniqueness of set elements is maintained.  If the parameter element
    already exists in the set, no changed is made to the elements.  The
    function returns a reference to this set.

    This function can be called in the following ways:
      this_set.operator+=(new_item);
      this_set += new_item;

  Parameters:
    const Item& q - the element to be added to the set

  Return Value:
    array<Item>& - a reference to this array
  
 ***************************************************************************/

template <class Item>
set<Item>&
set<Item>::operator+=(const Item& q)
{
	// already present?
	if (member(q) >= 0)
		return *this;

	this->array<Item>::operator+=(q);

	return *this;
}


