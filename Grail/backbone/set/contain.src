//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	June 1995


/***************************************************************************

  File:  classes/set/contain.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      int set<Item>::contain(const set<Item>& s) const

    This function is a public member of the template class set
    (declared in set.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/30         Added header and comments


 ***************************************************************************/




/***************************************************************************

                 int set<Item>::contain(const set<Item>& s) const

  Description:
    This function is a public member of the template class set 
    (declared in set.h).  This is the containment operation for sets.  It
    checks whether all the elements in the parameter set are contained in
    this set.  If this set contains more than 32 elements, it is sorted 
    before checking to speed up the member operation.  The function returns
    1 if the parameter set is contained in this set and 0 otherwise.

    This function can be called in the following way:
      this_set.contain(other_set);

  Parameters:
    const set<Item>& s - a reference to the set to be checked for containment
                         in this set.

  Return Value:
    int - 1 if the parameter set is contained in this set, 0 otherwise.
  
 ***************************************************************************/

template <class Item>
int
set<Item>::contain(const set<Item>& s) const
{
	if (sz > 32)
		sort();

	// now check all elements of s
	for (int i=0; i<s.sz; ++i)
		if (member(s[i]) < 0)
			return 0;
	return 1;
}


