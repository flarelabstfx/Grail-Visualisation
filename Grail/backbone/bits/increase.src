//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project
//	No commercial use permitted without written consent.
//	December 1995

/***************************************************************************

  File:  classes/bits/increase.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void bits::increase(const int j) 

    This function is a public member of the class bits (declared in bits.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/29         Added header and comments


 ***************************************************************************/




/***************************************************************************

                     void bits::increase(const int j) 

  Description:
    This function is a public member of the class bits (declared in bits.h).
    This function adds the number of bits specified by the parameter to the 
    existing bits in the bitmap.  A new chunk of memory is allocated so that 
    the bits can exist in a contiguous section of memory.  The existing bits 
    are copied and the old memory is freed.

    This function can be called in the following ways:
      this_bitmap.increase(value);

  Parameters:
    const int j - the number of new bits to add to the bitmap

  Return Value:  none
  
 ***************************************************************************/

void 
bits::increase(const int j) 
{
	// allocate new memory
	max += (j / block) + 1; 

	unsigned int* ptr = b;
	b = new unsigned int[max + 1]; 

	// zero the block
	memset(b, 0, (max + 1) * sizeof(unsigned int));

	// copy the existing bits
	memcpy(b, ptr, sz * sizeof(unsigned int));

	// delete the old memory
	delete [] ptr; 

	sz = max;
	return;
}
