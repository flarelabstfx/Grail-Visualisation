//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project
//	No commercial use permitted without written consent.
//	June 1995

/***************************************************************************

  File:  classes/bits/extract.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void bits::extract(bits& f, const int index) const 

    This function is a public member of the class bits (declared in bits.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/29         Added header and comments


 ***************************************************************************/




/***************************************************************************

             void bits::extract(bits& f, const int index) const 

  Description:
    This function is a public member of the class bits (declared in bits.h).
    This function extracts some bits from this bitmap and returns them in f. 
    The bits extracted depend on f and the value of index:  f.max defines 
    the number of bits to extract, and index determines which bits in this 
    bitmap should be extracted.

    For example, it f.max is 32 and index is 0, then bits 0-31 from this
    bitmap will be extracted.  If f.max is 32 and index is 2, then bits 
    (f.max * index) - (f.max * (index+1)) will be extracted (in other
    words, bits 64-95).  After the execution of extract, f will contain an 
    exact copy of the requested bits.

    This function can be called in the following way:
      this_bitmap.extract(new_bitmap, index);

  Parameters:
    bits& f - the array in which the extracted bits should be stored.
    const int index - the index of the section of bits to extract.

  Return Value:  none
  
 ***************************************************************************/

void
bits::extract(bits& f, const int index) const 
{
	// clear the current contents of f
	f.clear();

	// check to make sure the index/number of bits combination is possible
	if ((f.max * index + 1) > sz || index < 0) 
	{
		std::cout << index << " is out of range\n"; //by SH 05/20/2005
		return;
	}

	// copy the bits from this bitmap to f
	for (int i=0; i<f.max; ++i)
		f.b[i] = b[i + (f.max * index)];
}


