//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	August 1994

/***************************************************************************

  File:  classes/array/unique.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      array<Item>& array<Item>::unique()

    This function is a public member of the template class array
    (declared in array.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/27         Added header and comments


 ***************************************************************************/




/***************************************************************************

                   array<Item>& array<Item>::unique()

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function first sorts the array, then
    eliminates any duplicate elements in the array and compacts the remaining
    elements.  operator== for Items is used to determine equality of
    Items.  A reference to this array is returned.

    This function can be called in the following way:
      this_array.unique()

  Parameters:  none

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::unique()
{
	int	i;
	int	j;

	// array must have two items to have duplicates
	if (sz < 2)
		return *this;

	sort();

        // loop through the original array using i and move elements to
        //  eliminate duplicates using j and k
	int k = 0;
	for (i=j=0; i<sz; ++i)
	{
                // move i past same elements
		if (p[i] == p[j])
			continue;

                // move one copy of a repeated element or move other elements
                //  down to fill space left by repeated elements
		if (k != j)
			p[k] = p[j];
		++k;
		j = i;
	}

	p[k] = p[j];
	sz = k+1;

	return *this;
}
