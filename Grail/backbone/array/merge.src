//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	February 1996

/***************************************************************************

  File:  /classes/array/merge.src
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void array<Item>::merge(const array<Item>& s)

    This function is a public member of the template class array
    (declared in array.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/26         Added header and comments


 ***************************************************************************/




/***************************************************************************

             void array<Item>::merge(const array<Item>& s)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function merges two sorted arrays.  It
    is the programmer's responsibility to make sure that the arrays are
    sorted before calling merge since no checking is done.  If this array
    is not large enough to accommodate the new items, its size will be
    increased to (sz + s.sz)/2 * 4 - (twice the average size of the two
    arrays).  When the function terminates, this array will contain all
    its original items plus the items in the parameter array in sorted
    order.  The contents of the parameter array are unchanged.

    This function can be called in the following ways:
      this_array.merge(new_array);

  Parameters:
    const array<Item>& s - the array which should be merged with this array.
                           (must be sorted)

  Return Value:  none

 ***************************************************************************/

template <class Item>
void
array<Item>::merge(const array<Item>& s)
{
	// merge assumes both arrays are sorted

	// avoid self merging
	if (this == &s)
		return;

	// if more space needed, then reallocate and merge
	// external arrays
	if (max < sz + s.sz)
	{
		max = (sz + s.sz)/2 * 4;

		Item* r = p;
		p = new Item[max];

		Item*	ptr1 = &r[sz-1];            // pointer in original
		Item*	ptr2 = &s.p[s.sz-1];        // pointer in parameter
		Item*   spot = &p[sz + s.sz - 1];   // new spot for item

                // loop through both arrays and fill the new array (starts
                //  with the last item in each array)
		for (;;)
		{
			if (ptr1 >= r && ptr2 >= s.p)
			{
				if (*ptr1 > *ptr2)
					*spot-- = *ptr1--;
				else
					*spot-- = *ptr2--;
				continue;
			}

			if (ptr1 >= r)
				*spot-- = *ptr1--;

			if (ptr2 >= s.p)
				*spot-- = *ptr2--;

			if (ptr1 < r && ptr2 < s.p)
				break;
		}

		sz += s.sz;
		delete [] r;
		return;
	}

	// otherwise, merge in place
        Item*   ptr1 = &p[sz-1];             // pointer in original array
        Item*   ptr2 = &s.p[s.sz-1];         // pointer in parameter array
        Item*   spot = &p[sz + s.sz - 1];    // new spot for next item


        // loop through both arrays and fill the original array starting
        //  with the last item and working backwards.
        for (;;)
        {
        	if (ptr1 >= p && ptr2 >= s.p)
                {
                 	if (*ptr1 > *ptr2)
                        	*spot-- = *ptr1--;
                         else
                                 *spot-- = *ptr2--;
                         continue;
		}

		if (ptr1 >= p)
			*spot-- = *ptr1--;

		if (ptr2 >= s.p)
			*spot-- = *ptr2--;

		if (ptr1 < p && ptr2 < s.p)
			break;
	}
	sz += s.sz;
	return;
}
