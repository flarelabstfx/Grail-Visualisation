//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	August 1994

/***************************************************************************

  File:  classes/array/pluseq.src
  -----

  Description:
  ------------
    This file contains the definitions of the following functions:
      array<Item>& array<Item>::operator+=(const array<Item>& s) and
      array<Item>& array<Item>::operator+=(const Item& q)

    These function are public members of the template class array
    (declared in array.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/05/27         Added header and comments


 ***************************************************************************/




/***************************************************************************

       array<Item>& array<Item>::operator+=(const array<Item>& s)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function implements the array union
    operation.  All the elements in the parameter array are added to this
    array.  If this array is not large enough to accommodate the new
    elements, its size is increased to (sz + s.sz)/2 * 4 - (twice the
    average size of the two arrays).  When the function terminates, this
    array will contain all its original elements followed by the elements
    from the parameter array.  The order of the elements is not changed,
    and no checking for duplicate items is done.  The contents of the
    parameter array are unchanged, and a reference to this array is returned.

    This function can be called in the following ways:
      this_array.operator+=(new_array);
      this_array += new_array;

  Parameters:
    const array<Item>& s - the array to be added to this array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::operator+=(const array<Item>& s)
{
	int	i;

	// avoid self addition
	if (this == &s)
		return *this;

	// add space if necessary
	if (max < sz + s.sz)
	{
		max = (sz + s.sz)/2 * 4;

		Item* r = p;
		p = new Item[max];

                // copy existing elements
		for (i=0; i<sz; ++i)
			p[i] = r[i];
		delete [] r;
	}

        // insert new elements from the parameter array
	for (i=0; i<s.sz; ++i)
		p[sz + i] = s[i];

	sz += i;
	sorted = 0;

	return *this;
}



/***************************************************************************

           array<Item>& array<Item>::operator+=(const Item& q)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  The parameter element is added to this array.
    If the array is not large enough, its size is doubled if it was less
    than 65536 and increased by 65536 otherwise.  The function updates
    the sorted property and returns a reference to this array.

    This function can be called in the following ways:
      this_array.operator+=(new_item);
      this_array += new_item;

  Parameters:
    const Item& q - the item to be added to this array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::operator+=(const Item& q)
{
	// enough space?
	if (sz == max)
	{
		if (max > 65536)
			max += 65536;
		else
			max *= 2;

		Item* r = p;
		p = new Item[max];
		for (int i=0; i<sz; ++i)
			p[i] = r[i];

		delete [] r;
	}

	// add the element
	p[sz++] = q;

	if ((sorted == 1) && (sz > 1) && (p[sz-2] > p[sz-1]))
		sorted = 0;

	return *this;
}
