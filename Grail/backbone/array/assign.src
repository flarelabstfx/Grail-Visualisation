//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	January 1996


/***************************************************************************

  File:  classes/array/assign.src
  -----

  Description:
  ------------
    This file contains the definition of the following functions:
      array<Item>& array<Item>::operator=(const array<Item>& s) and
      array<Item>& array<Item>::operator=(const Item& i)

    These functions are public members of the template class array
    (declared in array.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/02/04         Added header and comments


 ***************************************************************************/




/***************************************************************************

         array<Item>& array<Item>::operator=(const array<Item>& s)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function is assigns this array
    to contain the same elements as the parameter array.  If the parameter
    array contains more elements than this array can currently hold, the size
    of this array is changed to match the size of the parameter array.  A
    reference to the new array is returned.

    This function can be called in the following ways:
      this_array.operator=(new_array);
      this_array = new_array;

  Parameters:
    const array<Item>& s - the array to be copied into this array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/


template <class Item>
array<Item>&
array<Item>::operator=(const array<Item>& s)
{
	// avoid self assignment
	if (this == &s)
		return *this;

	// is there enough space in the array?
	if (max < s.sz)
	{
		max = s.sz;
		delete [] p;   //seg abort ???
		p = new Item[max];
	}

	// add the elements (replace any existing elements)
	for (sz=0; sz<s.sz; ++sz)
		p[sz] = s.p[sz];

	sorted = s.sorted;
	return *this;
}



/***************************************************************************

           array<Item>& array<Item>::operator=(const Item& i)

  Description:
    This function is a public member of the template class array
    (declared in array.h).  This function is assigns this array
    to contain only the element specified as a parameter.  The size of
    the array is changed to 1 and a reference to the new array is
    returned.

    This function can be called in the following ways:
      this_array.operator=(new_item);
      this_array = new_item;

  Parameters:
    const Item& i - the item to be copied into this array

  Return Value:
    array<Item>& - a reference to this array

 ***************************************************************************/

template <class Item>
array<Item>&
array<Item>::operator=(const Item& i)
{
	p[0] = i;
	sz = 1;
	sorted = 1;
	return *this;
}
