//#This comes from 3.1.4-new
//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent.
//	December 1995

/***************************************************************************

 File:  classes/array/array.src
 -----

 Description:
 ------------
 This file contains the definition of the following functions:
 array<Item>::array()
 array<Item>::array(int i)
 array<Item>::array(const array<Item>& s)
 array<Item>::~array()
 void array<Item>::pool_extract(const int i)

 These functions are members of the template class array (declared
 in array.h).  The first four are public members (constructors and
 destructor), and the last is a private member function.

 Revision History:
 -----------------
 The Grail Project               Initial version of source code
 M.Hoeberechts  98/05/28         Added header and comments


 ***************************************************************************/

#ifndef	XLC
template<class Item>
  int array<Item>::max_pool = 32;

template<class Item>
  array<Item>* array<Item>::pool = (array<Item>*) new char[array<Item>::max_pool
      * sizeof(array<Item> )];
#endif

// required for compilation with version 1.0 of xlC
#ifdef	XLC
int max_pool = 32;

template <class Item>
array<Item>* array<Item>::pool =
(array<Item>*) new char[max_pool * sizeof(array<Item>)];
#endif

// initialize the pool to empty
template<class Item>
  int array<Item>::pool_sz = 0;

/***************************************************************************

 array<Item>::array()

 Description:
 This function is a public member of the template class array
 (declared in array.h).  This is the default constructor for arrays.
 If there are no arrays in the pool, a new array is allocated.
 Otherwise, pool_extract is called to retrieve an existing array.  The
 array is initialized to be empty and sorted.

 Parameters:  none

 ***************************************************************************/

template<class Item>
  array<Item>::array()
  {
    sz = 0;
    sorted = 1;
    if (pool_sz == 0)
      {
        p = new Item[max = ARRAY_SIZE];
      }
    else
      pool_extract(pool_sz - 1);
  }

/***************************************************************************

 array<Item>::array(int i)

 Description:
 This function is a public member of the template class array
 (declared in array.h).  This is a constructor for arrays which creates
 an array which can hold (at least) the number of items specified by
 the parameter.  If there are no arrays which are large enough in the
 pool, a new array is allocated.  Otherwise, pool_extract is called to
 retrieve an existing array.  If an existing array is used, the first
 one which is large enough to contain the specified number of items will
 be chosen - no attempt to find the best fit is made.  The array is
 initialized to be empty and sorted.

 Parameters:
 int i - the number of elements required for the array

 ***************************************************************************/

template<class Item>
  array<Item>::array(int i)
  {
    sz = 0;
    sorted = 1;

    // check the pool for an existing array
    for (int j = 0; j < pool_sz; ++j)
      if (pool[j].max > i)
        {
          pool_extract(j);
          return;
        }

    // if none big enough, then allocate another
    max = i + 1;
    p = new Item[max];
    return;
  }

/***************************************************************************

 array<Item>::array(const array<Item>& s)

 Description:
 This function is a public member of the template class array
 (declared in array.h).  This is a copy constructor for arrays.
 The new array will be a copy of the parameter array.  To allocate
 space, the pool is searched for an array which can hold (at least)
 the number of elements in the parameter array.  If there are no arrays
 which are large enough in the pool, a new array is allocated.  Otherwise,
 pool_extract is called to retrieve an existing array.  If an existing
 array is used, the first one which is large enough to contain the
 required number of items will be chosen - no attempt to find the best
 fit is made.  The new array will contains the same elements and flag
 values as the parameter array, and the parameter array is unchanged.

 Parameters:
 const array<Item>& s - the array to be copied into the new array

 ***************************************************************************/

template<class Item>
  array<Item>::array(const array<Item>& s)
  {
    sorted = 1;
    sz = 0;

    // allocate or use one from the pool
    if (pool_sz == 0)
      {
        p = new Item[max = s.max];
      }
    else
      pool_extract(pool_sz - 1);

    // now assign
    *this = s;
  }

/***************************************************************************

 array<Item>::~array()

 Description:
 This function is a public member of the template class array
 (declared in array.h).  This is the destructor for arrays.  If the
 pool already contains the maximum number of arrays or the size of
 this array is greater than 64 then the memory used by the array is
 freed.  Otherwise, the array is returned to the pool of available
 arrays.

 ***************************************************************************/

template<class Item>
  array<Item>::~array()
  {

    if (pool_sz == max_pool || max > 64)
      {
        // std::cout<<"Array deleted"<<std::endl;
        delete[] p;
        return;
      }

    pool[pool_sz].p = (Item *) p;
    pool[pool_sz].max = max;
    ++pool_sz;
    p = 0;
  }

/***************************************************************************

 void array<Item>::pool_extract(const int i)

 Description:
 This function is a private member of the template class array
 (declared in array.h).  This function removes the array specified by
 the parameter from the pool of available arrays and assigns this
 array to use the the extracted array's space.  The maximum number of
 elements for this array is set to the pool array's maximum.  The
 size of the pool is decremented.

 Parameters:
 const int i - the index in the pool of the requested array

 Return Value:  none

 ***************************************************************************/

template<class Item>
  void
  array<Item>::pool_extract(const int i)
  {
    // if the last array in the pool is requested, extract it
    if (i == pool_sz - 1)
      {
        p = (Item *) pool[pool_sz - 1].p;
        max = pool[pool_sz - 1].max;
        --pool_sz;
        return;
      }

    // if an array from the middle of the pool is requested, move the
    //  last array in the pool to the middle to fill the space.
    p = (Item *) pool[i].p;
    max = pool[i].max;
    pool[i].p = (Item *) pool[pool_sz - 1].p;
    pool[i].max = pool[pool_sz - 1].max;
    --pool_sz;
  }
